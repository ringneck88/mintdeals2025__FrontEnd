---
import '../styles/global.css';
import AgeGate from '../components/AgeGate.astro';

export interface Props {
  title: string;
  description?: string;
}

const { title, description = "Mint Cannabis Deals" } = Astro.props;

// Fetch categories and regions for navigation
const API_BASE = 'https://mintdealsbackend-production.up.railway.app/api';
let categories: any[] = [];
let regions: any[] = [];

try {
  const response = await fetch(`${API_BASE}/categories?pagination[pageSize]=100`);
  if (response.ok) {
    const data = await response.json();

    categories = (data?.data || []).map((cat: any) => {
      // Handle both direct and nested attribute structures
      const catData = cat.attributes || cat;
      const name = catData.Name || catData.name || '';
      const slug = catData.slug || catData.Slug || cat.documentId || '';

      return {
        name,
        slug,
        icon: getCategoryIcon(slug)
      };
    }).filter((cat: any) => cat.name && cat.slug);
  }
} catch (error) {
  // Silently handle error - categories will remain empty array
}

// Fetch regions for navigation
let navRegions: any[] = [];
try {
  const response = await fetch(`${API_BASE}/regions?pagination[pageSize]=100`);
  if (response.ok) {
    const data = await response.json();

    navRegions = (data?.data || []).map((region: any) => {
      const name = region.name || '';
      const code = region.code || '';
      const slug = name ? name.toLowerCase().replace(/\s+/g, '-') : '';

      return {
        id: region.id || region.documentId,
        name,
        code,
        slug
      };
    }).filter((region: any) => region.name && region.slug)
      .sort((a: any, b: any) => a.name.localeCompare(b.name));
  }
} catch (error) {
  // Silently handle error - regions will remain empty array
}

// Fetch stores/locations for navigation grouped by region
let storesByRegion: any = {};
try {
  const response = await fetch(`${API_BASE}/stores?populate=*&pagination[pageSize]=500`);
  if (response.ok) {
    const data = await response.json();

    const stores = (data?.data || []).map((store: any) => {
      const name = store.name || '';
      const id = store.id || store.documentId;
      const slug = store.slug || (name ? name.toLowerCase().replace(/\s+/g, '-') : id);
      const regionData = store.region;

      // Safely extract region name - handle both nested and direct structures
      let regionName = 'Other';
      if (regionData) {
        if (typeof regionData === 'string') {
          regionName = regionData;
        } else if (typeof regionData === 'object') {
          regionName = regionData.name || regionData.Name || 'Other';
        }
      }

      const regionId = regionData?.id || regionData?.documentId || 'other';

      // Check if store is 24 hours by examining hours array
      const is24Hour = store.hours && Array.isArray(store.hours)
        ? store.hours.some((day: any) => day.is24hours === true || day.is_24hour === true)
        : false;

      return {
        id,
        name,
        slug,
        regionName,
        regionId,
        is24Hour
      };
    }).filter((store: any) => store.name);

    // Group stores by region
    stores.forEach((store: any) => {
      if (!storesByRegion[store.regionName]) {
        storesByRegion[store.regionName] = [];
      }
      storesByRegion[store.regionName].push(store);
    });

    // Sort stores within each region alphabetically
    Object.keys(storesByRegion).forEach(regionName => {
      storesByRegion[regionName].sort((a: any, b: any) => a.name.localeCompare(b.name));
    });
  }
} catch (error) {
  // Silently handle error - storesByRegion will remain empty object
}

function getCategoryIcon(slug: string) {
  const icons: Record<string, string> = {
    'flower': '🌿',
    'pre-rolls': '🚬',
    'vaporizers': '💨',
    'concentrates': '🍯',
    'edibles': '🍭',
    'topicals': '🧴',
    'cartridges': '🖊️',
    'tinctures': '💧'
  };
  return icons[slug] || '🌱';
}
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="/favicon.png" type="image/png" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="description" content={description} />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
  </head>
  <body class="bg-gray-50 min-h-screen">
    <AgeGate />

    <header class="bg-black shadow-lg">
      <div class="max-w-[95%] mx-auto px-8 sm:px-12 lg:px-16 xl:px-20">
        <div class="flex justify-between items-center py-6">
          <div class="flex items-center">
            <a href="/" class="flex items-center space-x-2 hover:opacity-80 transition-opacity">
              <img
                src="/assets/Mint_Full_Logo.png"
                alt="Mint Cannabis"
                class="h-12 w-auto object-contain"
              />
            </a>
          </div>

          <nav class="hidden md:flex space-x-8 items-center">
            <a href="/" class="text-gray-200 hover:text-yellow-600 px-3 py-2 rounded-md text-sm font-semibold">
              Home
            </a>

            <!-- Categories Dropdown -->
            <div class="relative" id="categoriesDropdown">
              <a href="/categories" class="text-gray-200 hover:text-emerald-600 px-3 py-2 rounded-md text-sm font-semibold flex items-center gap-1">
                Categories
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                </svg>
              </a>

              <!-- Dropdown Menu -->
              <div id="categoriesMenu" class="absolute left-0 mt-1 w-72 bg-black border-2 border-emerald-600 rounded-lg shadow-2xl hidden z-50">
                <div class="py-2 max-h-96 overflow-y-auto">
                  <div class="px-4 py-3 border-b-2 border-emerald-800 bg-gradient-to-r from-emerald-900 to-emerald-800">
                    <p class="text-yellow-400 font-bold text-sm pb-1 leading-snug">Browse by Category</p>
                  </div>
                  {categories.map(category => (
                    <a
                      href={`/${category.slug}`}
                      class="block px-4 py-3 text-sm text-gray-200 hover:bg-emerald-900 hover:text-emerald-400 transition-colors border-b border-gray-800 last:border-b-0"
                    >
                      <span class="text-lg mr-2">{category.icon}</span>
                      <span class="font-medium">{category.name}</span>
                    </a>
                  ))}
                  <a href="/categories" class="block px-4 py-3 text-sm font-bold text-center border-t-2 border-emerald-800 bg-gradient-to-r from-yellow-400 to-transparent text-white hover:from-yellow-500 hover:to-transparent transition-all">
                    📋 View All Categories →
                  </a>
                </div>
              </div>
            </div>

            <!-- Regions Dropdown -->
            <div class="relative" id="regionsDropdown">
              <a href="/regions" class="text-gray-200 hover:text-blue-600 px-3 py-2 rounded-md text-sm font-semibold flex items-center gap-1">
                Regions
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                </svg>
              </a>

              <!-- Dropdown Menu -->
              <div id="regionsMenu" class="absolute left-0 mt-1 w-64 bg-black border-2 border-blue-600 rounded-lg shadow-2xl hidden z-50">
                <div class="py-2 max-h-96 overflow-y-auto">
                  <div class="px-4 py-3 border-b-2 border-blue-800 bg-gradient-to-r from-blue-900 to-blue-800">
                    <p class="text-yellow-400 font-bold text-sm pb-1 leading-snug">Browse by Region</p>
                  </div>
                  {navRegions.map(region => (
                    <a
                      href={`/region/${region.slug}`}
                      class="block px-4 py-3 text-sm text-gray-200 hover:bg-blue-900 hover:text-blue-400 transition-colors border-b border-gray-800 last:border-b-0"
                    >
                      <span class="text-lg mr-2">📍</span>
                      <span class="font-medium">{region.name}</span>
                      {region.code && <span class="text-xs text-gray-400 ml-2">({region.code})</span>}
                    </a>
                  ))}
                  <a href="/regions" class="block px-4 py-3 text-sm font-bold text-center border-t-2 border-blue-800 bg-gradient-to-r from-yellow-400 to-transparent text-white hover:from-yellow-500 hover:to-transparent transition-all">
                    🗺️ View All Regions →
                  </a>
                </div>
              </div>
            </div>

            <!-- Locations Dropdown -->
            <div class="relative" id="locationsDropdown">
              <a href="/stores" class="text-gray-200 hover:text-green-600 px-3 py-2 rounded-md text-sm font-semibold flex items-center gap-1">
                Locations
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                </svg>
              </a>

              <!-- Dropdown Menu -->
              <div id="locationsMenu" class="absolute left-0 mt-1 w-80 bg-black border-2 border-green-600 rounded-lg shadow-2xl hidden z-50">
                <div class="py-2 max-h-96 overflow-y-auto">
                  <div class="px-4 py-3 border-b-2 border-green-800 bg-gradient-to-r from-green-900 to-green-800">
                    <p class="text-yellow-400 font-bold text-sm pb-1 leading-snug">Browse by Location</p>
                  </div>
                  {Object.keys(storesByRegion).sort().map(regionName => (
                    <div class="border-b border-gray-800 last:border-b-0">
                      {/* Region Header */}
                      <div class="px-4 py-2 bg-gray-900 text-green-400 font-semibold text-xs uppercase tracking-wide">
                        {regionName}
                      </div>

                      {/* Stores in Region */}
                      <div class="bg-gray-950">
                        {storesByRegion[regionName].map((store: any) => (
                          <a
                            href={`/location/${store.slug}`}
                            class="block px-4 py-2 pl-6 text-sm text-gray-300 hover:bg-green-900 hover:text-green-300 transition-colors"
                          >
                            <span class="text-base mr-2">{store.is24Hour ? '🏪' : '🏣'}</span>
                            <span>{store.name}</span>
                          </a>
                        ))}
                      </div>
                    </div>
                  ))}
                  <a href="/stores" class="block px-4 py-3 text-sm font-bold text-center border-t-2 border-green-800 bg-gradient-to-r from-yellow-400 to-transparent text-white hover:from-yellow-500 hover:to-transparent transition-all">
                    🏬 View All Locations →
                  </a>
                </div>
              </div>
            </div>
            <a href="/map" class="text-gray-200 hover:text-purple-600 px-3 py-2 rounded-md text-sm font-semibold">
              Map
            </a>
            <a href="/deals" class="text-gray-200 hover:text-orange-600 px-3 py-2 rounded-md text-sm font-semibold">
              Deals
            </a>
          </nav>
        </div>
      </div>
    </header>

    <main>
      <slot />
    </main>

    <footer class="bg-gray-800 text-white">
      <div class="max-w-[95%] mx-auto px-8 sm:px-12 lg:px-16 xl:px-20 py-12">
        <div class="grid grid-cols-1 md:grid-cols-4 gap-8 mb-8">
          <!-- About Section with Logo -->
          <div>
            <a href="/" class="inline-block mb-4 hover:opacity-80 transition-opacity">
              <img
                src="/assets/Mint_Full_Logo.png"
                alt="Mint Cannabis"
                class="h-16 w-auto object-contain"
              />
            </a>
            <p class="text-gray-400 text-sm">
              Your trusted source for premium cannabis products and deals.
            </p>
          </div>

          <!-- Quick Links -->
          <div>
            <h3 class="text-lg font-semibold text-white mb-4">Quick Links</h3>
            <ul class="space-y-2">
              <li>
                <a href="/" class="text-gray-400 hover:text-yellow-400 text-sm transition-colors">Home</a>
              </li>
              <li>
                <a href="/categories" class="text-gray-400 hover:text-emerald-400 text-sm transition-colors">Categories</a>
              </li>
              <li>
                <a href="/stores" class="text-gray-400 hover:text-green-400 text-sm transition-colors">Locations</a>
              </li>
              <li>
                <a href="/map" class="text-gray-400 hover:text-purple-400 text-sm transition-colors">Map</a>
              </li>
              <li>
                <a href="/deals" class="text-gray-400 hover:text-orange-400 text-sm transition-colors">Deals</a>
              </li>
            </ul>
          </div>

          <!-- Resources -->
          <div>
            <h3 class="text-lg font-semibold text-white mb-4">Resources</h3>
            <ul class="space-y-2">
              <li>
                <a href="/dosing-guide" class="text-gray-400 hover:text-emerald-400 text-sm transition-colors">Dosing Guide</a>
              </li>
              <li>
                <a href="/coa" class="text-gray-400 hover:text-emerald-400 text-sm transition-colors">Certificate of Analysis</a>
              </li>
              <li>
                <a href="/regions" class="text-gray-400 hover:text-emerald-400 text-sm transition-colors">Regions</a>
              </li>
            </ul>
          </div>

          <!-- Contact -->
          <div>
            <h3 class="text-lg font-semibold text-white mb-4">Contact</h3>
            <ul class="space-y-2">
              <li>
                <a href="/contact-us" class="text-gray-400 hover:text-yellow-400 text-sm transition-colors">Contact Us</a>
              </li>
              <li>
                <a href="tel:480-749-6468" class="text-gray-400 hover:text-yellow-400 text-sm transition-colors">480-749-MINT (6468)</a>
              </li>
              <li>
                <a href="mailto:info@mintdeals.com" class="text-gray-400 hover:text-yellow-400 text-sm transition-colors">info@mintdeals.com</a>
              </li>
            </ul>
          </div>
        </div>

        <div class="border-t border-gray-700 pt-8 text-center">
          <p class="text-gray-400 text-sm">
            © 2025 Mint Cannabis. All rights reserved.
          </p>
          <!-- Debug: User Location Display -->
          <p id="userLocationDebug" class="text-yellow-400 text-xs mt-2 font-mono">
            Location: Loading...
          </p>
        </div>
      </div>
    </footer>

    <script>
      // Display user's current location for debugging
      if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(
          (position) => {
            const lat = position.coords.latitude.toFixed(6);
            const lon = position.coords.longitude.toFixed(6);
            const debugEl = document.getElementById('userLocationDebug');
            if (debugEl) {
              debugEl.textContent = `Your Location: Lat ${lat}, Lon ${lon}`;
            }
          },
          (error) => {
            const debugEl = document.getElementById('userLocationDebug');
            if (debugEl) {
              debugEl.textContent = `Location Error: ${error.message}`;
            }
          }
        );
      } else {
        const debugEl = document.getElementById('userLocationDebug');
        if (debugEl) {
          debugEl.textContent = 'Geolocation not supported';
        }
      }
    </script>

    <script>
      // Categories dropdown functionality
      const categoriesDropdown = document.getElementById('categoriesDropdown');
      const categoriesMenu = document.getElementById('categoriesMenu');

      if (categoriesDropdown && categoriesMenu) {
        let isOpen = false;
        let closeTimeout: NodeJS.Timeout | null = null;

        // Open dropdown on mouseenter
        categoriesDropdown.addEventListener('mouseenter', () => {
          if (closeTimeout) clearTimeout(closeTimeout);
          categoriesMenu.classList.remove('hidden');
          isOpen = true;
        });

        // Keep open when hovering over menu
        categoriesMenu.addEventListener('mouseenter', () => {
          if (closeTimeout) clearTimeout(closeTimeout);
          isOpen = true;
        });

        // Close dropdown with delay on mouseleave
        categoriesDropdown.addEventListener('mouseleave', () => {
          closeTimeout = setTimeout(() => {
            categoriesMenu.classList.add('hidden');
            isOpen = false;
          }, 200);
        });

        categoriesMenu.addEventListener('mouseleave', () => {
          closeTimeout = setTimeout(() => {
            categoriesMenu.classList.add('hidden');
            isOpen = false;
          }, 200);
        });
      }

      // Regions dropdown functionality
      const regionsDropdown = document.getElementById('regionsDropdown');
      const regionsMenu = document.getElementById('regionsMenu');

      if (regionsDropdown && regionsMenu) {
        let isOpen = false;
        let closeTimeout: NodeJS.Timeout | null = null;

        // Open dropdown on mouseenter
        regionsDropdown.addEventListener('mouseenter', () => {
          if (closeTimeout) clearTimeout(closeTimeout);
          regionsMenu.classList.remove('hidden');
          isOpen = true;
        });

        // Keep open when hovering over menu
        regionsMenu.addEventListener('mouseenter', () => {
          if (closeTimeout) clearTimeout(closeTimeout);
          isOpen = true;
        });

        // Close dropdown with delay on mouseleave
        regionsDropdown.addEventListener('mouseleave', () => {
          closeTimeout = setTimeout(() => {
            regionsMenu.classList.add('hidden');
            isOpen = false;
          }, 200);
        });

        regionsMenu.addEventListener('mouseleave', () => {
          closeTimeout = setTimeout(() => {
            regionsMenu.classList.add('hidden');
            isOpen = false;
          }, 200);
        });
      }

      // Locations dropdown functionality
      const locationsDropdown = document.getElementById('locationsDropdown');
      const locationsMenu = document.getElementById('locationsMenu');

      if (locationsDropdown && locationsMenu) {
        let isOpen = false;
        let closeTimeout: NodeJS.Timeout | null = null;

        // Open dropdown on mouseenter
        locationsDropdown.addEventListener('mouseenter', () => {
          if (closeTimeout) clearTimeout(closeTimeout);
          locationsMenu.classList.remove('hidden');
          isOpen = true;
        });

        // Keep open when hovering over menu
        locationsMenu.addEventListener('mouseenter', () => {
          if (closeTimeout) clearTimeout(closeTimeout);
          isOpen = true;
        });

        // Close dropdown with delay on mouseleave
        locationsDropdown.addEventListener('mouseleave', () => {
          closeTimeout = setTimeout(() => {
            locationsMenu.classList.add('hidden');
            isOpen = false;
          }, 200);
        });

        locationsMenu.addEventListener('mouseleave', () => {
          closeTimeout = setTimeout(() => {
            locationsMenu.classList.add('hidden');
            isOpen = false;
          }, 200);
        });
      }
    </script>
  </body>
</html>
