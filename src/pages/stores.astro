---
export const prerender = true;

import Layout from '../layouts/Layout.astro';

let regions = [];
let stores = [];
let error = null;

const API_BASE = 'https://mintdealsbackend-production.up.railway.app/api';

try {
  console.log('üöÄ Fetching stores and regions from API');

  // Helper function to get image URL from various possible structures
  function getImageUrl(imageData) {
    if (!imageData || imageData === null) return null;

    // Case 1: Strapi v4 nested structure: image.data.attributes.url
    if (imageData?.data?.attributes?.url) {
      const url = imageData.data.attributes.url;
      return url.startsWith('http') ? url : `https://mintdealsbackend-production.up.railway.app${url}`;
    }

    // Case 2: Direct image object with formats (Cloudinary or Strapi uploaded images)
    if (typeof imageData === 'object' && imageData.formats) {
      // Prefer larger formats for better quality
      if (imageData.formats.large?.url) return imageData.formats.large.url;
      if (imageData.formats.medium?.url) return imageData.formats.medium.url;
      if (imageData.formats.small?.url) return imageData.formats.small.url;
      if (imageData.formats.thumbnail?.url) return imageData.formats.thumbnail.url;
    }

    // Case 3: Direct image object with url: image.url
    if (typeof imageData === 'object' && imageData.url) {
      const url = imageData.url;
      return url.startsWith('http') ? url : `https://mintdealsbackend-production.up.railway.app${url}`;
    }

    // Case 4: String URL directly
    if (typeof imageData === 'string') {
      return imageData.startsWith('http') ? imageData : `https://mintdealsbackend-production.up.railway.app${imageData}`;
    }

    return null;
  }

  // Fetch regions first with deep Image population (no cache)
  const regionsResponse = await fetch(`${API_BASE}/regions?populate[Image][populate]=*&pagination[pageSize]=100`, {
    cache: 'no-store'
  });
  if (regionsResponse.ok) {
    const regionsData = await regionsResponse.json();
    regions = regionsData?.data?.map(region => {
      // Check multiple possible image field names
      const imageUrl = getImageUrl(region.Image) || getImageUrl(region.image) || getImageUrl(region.RegionImage);

      return {
        id: region.id,
        documentId: region.documentId,
        Name: region.name || 'Unknown Region',
        Code: region.code || 'XX',
        State: region.name || 'Unknown State',
        Description: region.description || `Cannabis dispensaries in ${region.name}`,
        RegionImage: imageUrl ? { url: imageUrl } : null
      };
    }) || [];
    console.log('‚úÖ Regions loaded:', regions.length);
  }

  // Fetch stores from the stores endpoint
  const storesResponse = await fetch(`${API_BASE}/stores?populate=*&pagination[pageSize]=500`);

  if (storesResponse.ok) {
    const storesData = await storesResponse.json();
    const storesList = storesData?.data || [];

    stores = storesList.map(store => {
      // Extract address fields with type checking
      const getStringValue = (value, fallback = '') => {
        return typeof value === 'string' ? value : fallback;
      };

      // Extract coordinates from geo field (JSON object with lat/lng)
      let latitude = null;
      let longitude = null;

      if (store.geo) {
        if (typeof store.geo === 'object') {
          latitude = store.geo.lat || store.geo.latitude || null;
          longitude = store.geo.lng || store.geo.lon || store.geo.longitude || null;
        } else if (typeof store.geo === 'string') {
          try {
            const geoObj = JSON.parse(store.geo);
            latitude = geoObj.lat || geoObj.latitude || null;
            longitude = geoObj.lng || geoObj.lon || geoObj.longitude || null;
          } catch (e) {
            console.error('Failed to parse geo string for store:', store.name);
          }
        }
      }

      // Check if store is 24 hours by examining hours array
      const is24Hour = store.hours && Array.isArray(store.hours)
        ? store.hours.some(day => day.is24hours === true)
        : false;

      return {
        id: store.id,
        documentId: store.documentId,
        Name: store.name || 'Unnamed Store',
        slug: store.slug || store.documentId,
        Description: store.description,
        Address: getStringValue(store.address?.street) || getStringValue(store.street) || 'Address not available',
        City: getStringValue(store.address?.city) || getStringValue(store.city) || 'Unknown City',
        State: getStringValue(store.address?.state) || getStringValue(store.state) || 'Unknown State',
        ZipCode: getStringValue(store.address?.zipCode) || getStringValue(store.zip_code),
        Phone: store.phone,
        Email: store.email,
        Website: store.website,
        Latitude: latitude,
        Longitude: longitude,
        Hours: store.hours,
        Is24Hour: is24Hour,
        HasCafe: store.hasCafe || false,
        StoreImage: store.store_image || store.hero_image ? {
          url: (store.store_image?.url || store.hero_image?.url) ?
            ((store.store_image?.url || store.hero_image?.url).startsWith('http') ?
              (store.store_image?.url || store.hero_image?.url) :
              `https://mintdealsbackend-production.up.railway.app${store.store_image?.url || store.hero_image?.url}`) : null
        } : null,
        GalleryImages: store.gallery_images || [],
        IsFeatured: store.is_featured || false,
        IsActive: store.is_active !== false,
        StoreManager: store.store_manager,
        region: store.region ? {
          id: typeof store.region === 'object' ? store.region.id : store.region,
          Name: regions.find(r => r.id === (typeof store.region === 'object' ? store.region.id : store.region))?.Name || 'Unknown Region'
        } : null,
        dosage_products: store.products || []
      };
    }).filter(store => store.IsActive);

    console.log('‚úÖ Stores loaded:', stores.length);
    console.log('üìä Store regions:', stores.map(s => ({ name: s.Name, regionId: s.region?.id, regionName: s.region?.Name })));
  } else {
    throw new Error(`Failed to fetch stores: ${storesResponse.status}`);
  }

} catch (e) {
  error = e.message;
  console.error('‚ùå Error fetching store data:', e);
  stores = [];
  regions = [];
}
---

<style>
  body {
    margin: 0;
    padding: 0;
  }
  .video-background {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: -1;
    overflow: hidden;
  }
  .video-background::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-image: linear-gradient(to top,  rgba(41, 163, 41, 0.35), rgba(51, 204, 51, 0.3), rgba(92, 214, 92, 0.25), rgba(133, 224, 133, 0.2), rgba(194, 240, 194, 0.15), rgba(235, 250, 235, 0.1), rgba(255, 255, 255, 0.08), rgba(255, 255, 255, 0.06), rgba(255, 255, 255, 0.04), rgba(255, 255, 255, 0.02));
    mix-blend-mode: color;
    pointer-events: none;
    z-index: 1;
  }
  .video-background video {
    object-fit: cover;
    height: 100%;
    width: 100%;
  }
  .content-wrapper {
    position: relative;
    z-index: 1;
    background: linear-gradient(to bottom, rgba(0,0,0,0.2), rgba(0,0,0,0.4));
  }
  .hero-section {
    min-height: 7.5vh;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 0.5rem 0;
  }

  .hero-section h1 {
    line-height: 1.2;
  }

  @media (min-width: 768px) {
    .hero-section {
      min-height: 30vh;
      padding: 1rem 0;
    }
  }
</style>

<Layout title="Store Locations - Mint Cannabis">
  <!-- Video Background -->
  <div class="video-background">
    <video autoplay loop muted playsinline>
      <source src="https://video.wixstatic.com/video/d47472_58cce06729c54ccb935886c4b3647274/1080p/mp4/file.mp4" type="video/mp4">
    </video>
  </div>

  <!-- Content Wrapper -->
  <div class="content-wrapper">
    <!-- Hero Section -->
    <div class="text-white hero-section">
      <div class="px-8 mx-auto sm:px-12 lg:px-16 xl:px-20 max-w-[90%]">
        <!-- Breadcrumb -->
        <nav class="mb-6 text-sm">
          <div class="flex items-center space-x-2">
            <a href="/" class="text-yellow-400 hover:text-yellow-300">Home</a>
            <span class="text-green-300">/</span>
            <span class="text-white">Stores</span>
          </div>
        </nav>

        <div class="text-center">
          <h1 class="mb-4 text-4xl font-bold md:text-6xl drop-shadow-2xl">
            <span class="inline-block pb-2 leading-tight bg-gradient-to-r from-yellow-400 to-orange-500 bg-clip-text text-transparent" style="padding-bottom: 0.5rem;">
              Mint Cannabis Locations
            </span>
          </h1>
          <p class="max-w-2xl mx-auto mb-6 text-lg text-yellow-400 md:text-xl drop-shadow-lg">
            Premium cannabis dispensaries across multiple states
          </p>

          <!-- Navigation Buttons -->
          <div class="relative z-10 flex flex-wrap justify-center gap-4 mt-6">
            <a href="/categories" class="px-8 py-3 text-lg font-bold text-white transition-all transform rounded-lg shadow-xl bg-gradient-to-r from-yellow-400 to-transparent hover:from-yellow-500 hover:to-transparent hover:scale-105">
              Browse Categories
            </a>
            <a href="/regions" class="px-8 py-3 text-lg font-bold text-white transition-all transform rounded-lg shadow-xl bg-gradient-to-r from-yellow-400 to-transparent hover:from-yellow-500 hover:to-transparent hover:scale-105">
              Browse Regions
            </a>
          </div>
        </div>
      </div>
    </div>

    <!-- Quick Stats Bar -->
    <div class="py-4 bg-black bg-opacity-90">
      <div class="px-8 mx-auto sm:px-12 lg:px-16 xl:px-20 max-w-[90%]">
        <div class="grid grid-cols-2 gap-8 text-center md:grid-cols-4">
          <div>
            <div class="mb-1 text-2xl font-bold text-green-500">{stores.length}</div>
            <div class="text-sm text-yellow-400 font-semibold">Locations</div>
          </div>
          <div>
            <div class="mb-1 text-2xl font-bold text-green-500">{regions.length}</div>
            <div class="text-sm text-yellow-400 font-semibold">Regions</div>
          </div>
          <div>
            <div class="mb-1 text-2xl font-bold text-green-500">100%</div>
            <div class="text-sm text-yellow-400 font-semibold">Fresh</div>
          </div>
          <div>
            <div class="mb-1 text-2xl font-bold text-green-500">{Math.floor(Math.random() * (498 - 350 + 1)) + 350}</div>
            <div class="text-sm text-yellow-400 font-semibold">Discounted Items</div>
          </div>
        </div>
      </div>
    </div>

    <!-- Main Content -->
    <div class="bg-black py-12">
      <div class="max-w-[90%] mx-auto px-8 sm:px-12 lg:px-16 xl:px-20">
    {error && (
      <div class="bg-yellow-900/20 border border-yellow-700 text-yellow-200 px-6 py-4 rounded-xl mb-8 shadow-sm">
        <div class="flex items-center">
          <div class="flex-shrink-0">
            <svg class="w-5 h-5 text-yellow-500" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd"></path>
            </svg>
          </div>
          <div class="ml-3">
            <h3 class="text-sm font-semibold">Demo Mode Active</h3>
            <p class="text-sm mt-1">Showing sample store data. Connect to Strapi admin to display live data.</p>
          </div>
        </div>
      </div>
    )}

    <!-- Enhanced Search & Filter Section -->
    <div class="bg-gray-900 rounded-2xl shadow-lg border border-green-700 p-6 mb-12 hover:shadow-xl transition-shadow duration-300">
      <div class="flex flex-col md:flex-row lg:flex-row gap-4 md:gap-6">
        <!-- Search Input with Enhanced Styling -->
        <div class="flex-1 group">
          <label for="store-search" class="block text-sm font-medium text-gray-300 mb-2 group-focus-within:text-yellow-400 transition-colors">
            Search Stores
          </label>
          <div class="relative">
            <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
              <svg class="h-5 w-5 text-gray-400 group-focus-within:text-yellow-500 transition-colors" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
              </svg>
            </div>
            <input
              type="text"
              id="store-search"
              placeholder="Search by name, city, or address..."
              class="block w-full pl-10 pr-3 py-3 border border-gray-700 rounded-xl leading-5 bg-gray-800 text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-yellow-500 focus:border-yellow-500 hover:border-green-500 transition-all duration-200 transform focus:scale-[1.02]"
            />
          </div>
        </div>
        
        <!-- Region Filter with Enhanced Styling -->
        <div class="md:w-64 lg:w-64 group">
          <label for="region-filter" class="block text-sm font-medium text-gray-300 mb-2 group-focus-within:text-yellow-400 transition-colors">
            Filter by Region
          </label>
          <div class="relative">
            <select id="region-filter" class="block w-full px-4 py-3 border border-gray-700 rounded-xl bg-gray-800 text-white focus:outline-none focus:ring-2 focus:ring-yellow-500 focus:border-yellow-500 hover:border-green-500 transition-all duration-200 transform focus:scale-[1.02] appearance-none">
              <option value="">All Regions</option>
              {regions.map(region => (
                <option value={region.id}>{region.Name}</option>
              ))}
            </select>
            <div class="absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none">
              <svg class="h-5 w-5 text-gray-400 group-focus-within:text-green-500 transition-colors" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
              </svg>
            </div>
          </div>
        </div>
        
        <!-- Quick Action Buttons -->
        <div class="flex flex-col md:flex-row md:items-end gap-3 w-full md:w-auto">
          <button id="clear-filters" class="w-full md:w-auto px-4 py-3 border border-gray-700 text-gray-300 rounded-xl hover:bg-gray-800 transition-all duration-200 transform hover:scale-105 font-medium">
            Clear
          </button>
          <button id="show-map" class="w-full md:w-auto px-4 py-3 bg-gradient-to-r from-green-600 to-green-700 text-white rounded-xl hover:from-green-700 hover:to-green-800 transition-all duration-200 transform hover:scale-105 flex items-center justify-center gap-2 font-medium shadow-lg hover:shadow-xl">
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 20l-5.447-2.724A1 1 0 013 16.382V5.618a1 1 0 011.447-.894L9 7m0 13l6-3m-6 3V7m6 10l4.553 2.276A1 1 0 0021 18.382V7.618a1 1 0 00-.553-.894L15 4m0 13V4m0 0L9 7"></path>
            </svg>
            <span class="hidden sm:inline">Map View</span>
            <span class="sm:hidden">Map</span>
          </button>
        </div>
      </div>
      
      <!-- Filter Pills -->
      <div id="active-filters" class="mt-4 flex flex-wrap gap-2 hidden">
        <span class="text-sm text-gray-600 dark:text-gray-400">Active filters:</span>
      </div>
    </div>

    <!-- Stores Grid -->
    <div class="mb-16">
      <div class="text-center mb-12">
        <h2 class="text-4xl font-bold mb-4">
          <span class="inline-block pb-2 leading-tight bg-gradient-to-r from-yellow-400 to-orange-500 bg-clip-text text-transparent" style="padding-bottom: 0.5rem;">
            Our Store Locations
          </span>
        </h2>
        <p class="text-xl text-gray-300 max-w-3xl mx-auto">
          Visit any of our premium dispensary locations for expert guidance and the finest cannabis products
        </p>
      </div>
      
      <div id="stores-grid" class="grid grid-cols-1 gap-6 md:grid-cols-2 lg:grid-cols-3 xl:gap-8">
        {stores.map((store, index) => (
          <div
            class="store-card relative overflow-hidden transition-all transform bg-black border-2 border-green-500 rounded-lg shadow-lg hover:shadow-2xl hover:border-yellow-400 hover:scale-105"
            data-region-id={store.region?.id || ''}
            data-lat={store.Latitude || ''}
            data-lng={store.Longitude || ''}
          >
            {/* Store Name Header */}
            <div class="bg-gradient-to-r from-green-900 to-black p-4 border-b-2 border-green-500">
              <h3 class="text-xl font-bold text-center">
                <span class="inline-block pb-1 leading-tight bg-gradient-to-r from-yellow-400 to-orange-500 bg-clip-text text-transparent" style="padding-bottom: 0.25rem;">
                  {store.Name}
                </span>
              </h3>
            </div>

            <div class="relative">
              {store.StoreImage ? (
                <img
                  src={store.StoreImage.url}
                  alt={store.Name}
                  class="object-cover w-full h-48"
                />
              ) : (
                <div class="w-full h-48 bg-gradient-to-br from-green-600 to-green-800 flex items-center justify-center relative">
                  <span class="text-6xl" title={store.Is24Hour ? '24 Hour' : ''}>
                    {store.Is24Hour ? 'üè™' : 'üè£'}
                  </span>
                  {/* Mint coin logo overlay on building emoji */}
                  {!store.Is24Hour && (
                    <img
                      src="/favicon.png"
                      alt="Mint"
                      class="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-8 h-8 object-contain opacity-90"
                      style="margin-top: -8px;"
                    />
                  )}
                </div>
              )}

              {/* Distance Badge */}
              <div class="absolute top-2 left-2">
                <div class="store-distance-badge hidden bg-green-900/90 border border-green-500 text-green-300 px-2 py-1 rounded text-xs font-bold shadow-lg">
                  Calculating...
                </div>
              </div>

              {/* Cafe Badge */}
              {store.HasCafe && (
                <div class="absolute bottom-2 right-2">
                  <div class="bg-orange-900/90 border border-orange-500 text-orange-300 px-2 py-1 rounded text-2xl shadow-lg" title="Cafe on Site">
                    üçî
                  </div>
                </div>
              )}
            </div>

            <div class="p-6">
              {store.Address && (
                <div class="mb-2">
                  <p class="flex items-start text-green-300">
                    <svg class="w-5 h-5 mr-2 mt-0.5 text-green-600 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"/>
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"/>
                    </svg>
                    <span>{store.City}, {store.State}</span>
                  </p>
                  {(store.Latitude && store.Longitude) && (
                    <a
                      href={`https://www.google.com/maps/dir/?api=1&destination=${store.Latitude},${store.Longitude}`}
                      target="_blank"
                      rel="noopener noreferrer"
                      class="text-yellow-400 hover:text-yellow-300 text-sm ml-7 inline-block mt-1"
                    >
                      Get Driving Directions ‚Üí
                    </a>
                  )}
                </div>
              )}
              {store.Phone && (
                <p class="flex items-center mb-4 text-green-300">
                  <svg class="w-5 h-5 mr-2 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"/>
                  </svg>
                  {store.Phone}
                </p>
              )}
              <a href={`/location/${store.slug || store.documentId}`} class="inline-flex items-center font-medium text-yellow-400 hover:text-yellow-300">
                View Details
                <svg class="w-4 h-4 ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                </svg>
              </a>
            </div>
          </div>
        ))}
      </div>
    </div>

    <!-- No Results Message -->
    <div id="no-results" class="hidden text-center py-16">
      <div class="max-w-md mx-auto">
        <div class="bg-gray-800 rounded-full w-24 h-24 flex items-center justify-center mx-auto mb-6">
          <svg class="w-12 h-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
          </svg>
        </div>
        <h3 class="text-2xl font-bold text-white mb-4">No stores found</h3>
        <p class="text-gray-300 mb-6">Try adjusting your search criteria or browse all locations</p>
        <button
          onclick="document.getElementById('store-search').value = ''; document.getElementById('region-filter').value = ''; document.dispatchEvent(new Event('input', { target: document.getElementById('store-search') }));"
          class="bg-gradient-to-r from-yellow-400 to-orange-500 hover:from-yellow-500 hover:to-orange-600 text-white font-semibold py-3 px-6 rounded-xl transition-colors duration-300"
        >
          Clear Filters
        </button>
      </div>
    </div>

      </div>
    </div>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const regionFilter = document.getElementById('region-filter');
      const storeSearch = document.getElementById('store-search');
      const storesGrid = document.getElementById('stores-grid');
      const storeCards = document.querySelectorAll('.store-card');
      const noResults = document.getElementById('no-results');
      const regionFilterBtns = document.querySelectorAll('.region-filter-btn');
      const clearFiltersBtn = document.getElementById('clear-filters');
      const showMapBtn = document.getElementById('show-map');
      const activeFiltersDiv = document.getElementById('active-filters');

      // Get user location and sort stores by distance
      let userLat = null;
      let userLon = null;

      function calculateDistance(lat1, lon1, lat2, lon2) {
        const R = 3959; // Earth's radius in miles
        const dLat = (lat2 - lat1) * Math.PI / 180;
        const dLon = (lon2 - lon1) * Math.PI / 180;
        const a = Math.sin(dLat/2) * Math.sin(dLat/2) +
                  Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
                  Math.sin(dLon/2) * Math.sin(dLon/2);
        const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
        return R * c;
      }

      function formatDistance(distance) {
        if (distance < 0.1) {
          return `${(distance * 5280).toFixed(0)} ft`;
        } else if (distance < 1) {
          return `${distance.toFixed(2)} mi`;
        } else {
          return `${distance.toFixed(1)} mi`;
        }
      }

      function sortStoresByDistance() {
        if (!userLat || !userLon) return;

        const cardsArray = Array.from(storeCards);
        const cardsWithDistance = cardsArray.map(card => {
          // Extract lat/lon from data attributes
          const storeLat = parseFloat(card.dataset.lat);
          const storeLng = parseFloat(card.dataset.lng);

          let distance = Infinity;
          if (storeLat && storeLng && !isNaN(storeLat) && !isNaN(storeLng)) {
            distance = calculateDistance(userLat, userLon, storeLat, storeLng);

            // Show and update distance badge
            const distanceBadge = card.querySelector('.store-distance-badge');
            if (distanceBadge) {
              distanceBadge.textContent = `üìç ${formatDistance(distance)}`;
              distanceBadge.classList.remove('hidden');
            }
          }

          return { card, distance };
        });

        // Sort by distance (closest first)
        cardsWithDistance.sort((a, b) => a.distance - b.distance);

        // Reorder DOM elements
        cardsWithDistance.forEach(({ card }) => {
          storesGrid.appendChild(card);
        });

        console.log('‚úÖ Stores sorted by distance from user location:',
          cardsWithDistance.filter(s => s.distance !== Infinity).slice(0, 5).map(s => ({
            name: s.card.querySelector('h3').textContent.trim(),
            distance: formatDistance(s.distance)
          }))
        );
      }

      // Get user's geolocation
      if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(
          (position) => {
            userLat = position.coords.latitude;
            userLon = position.coords.longitude;
            console.log(`üìç User location: ${userLat}, ${userLon}`);
            sortStoresByDistance();
          },
          (error) => {
            console.warn('‚ö†Ô∏è Could not get user location:', error.message);
          }
        );
      }

      // Enhanced filtering with animation
      function filterStores() {
        const selectedRegion = regionFilter.value;
        const searchTerm = storeSearch.value.toLowerCase().trim();
        let visibleCount = 0;

        // Add fade out animation
        storeCards.forEach(card => {
          card.style.transition = 'opacity 0.3s ease, transform 0.3s ease';
          card.style.opacity = '0.5';
          card.style.transform = 'scale(0.95)';
        });

        setTimeout(() => {
          storeCards.forEach(card => {
            const regionId = card.dataset.regionId;
            const cardText = card.textContent.toLowerCase();
            
            const matchesRegion = !selectedRegion || regionId === selectedRegion;
            const matchesSearch = !searchTerm || cardText.includes(searchTerm);
            
            if (matchesRegion && matchesSearch) {
              card.style.display = 'block';
              card.style.opacity = '1';
              card.style.transform = 'scale(1)';
              visibleCount++;
            } else {
              card.style.display = 'none';
            }
          });

          // Show/hide no results with animation
          if (visibleCount === 0) {
            noResults.classList.remove('hidden');
            storesGrid.classList.add('hidden');
          } else {
            noResults.classList.add('hidden');
            storesGrid.classList.remove('hidden');
          }

          // Update active filters display
          updateActiveFilters(selectedRegion, searchTerm);
        }, 150);
      }

      // Update active filters display
      function updateActiveFilters(selectedRegion, searchTerm) {
        const hasFilters = selectedRegion || searchTerm;
        
        if (hasFilters) {
          activeFiltersDiv.classList.remove('hidden');
          let filtersHTML = '<span class="text-sm text-gray-600 dark:text-gray-400">Active filters:</span>';
          
          if (selectedRegion) {
            const regionName = regionFilter.options[regionFilter.selectedIndex].text;
            filtersHTML += `<span class="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200">
              Region: ${regionName}
              <button class="ml-1 text-green-600 hover:text-green-800" onclick="clearRegionFilter()">√ó</button>
            </span>`;
          }
          
          if (searchTerm) {
            filtersHTML += `<span class="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200">
              Search: "${searchTerm}"
              <button class="ml-1 text-yellow-600 hover:text-yellow-800" onclick="clearSearchFilter()">√ó</button>
            </span>`;
          }
          
          activeFiltersDiv.innerHTML = filtersHTML;
        } else {
          activeFiltersDiv.classList.add('hidden');
        }
      }

      // Clear functions for filter pills
      window.clearRegionFilter = function() {
        regionFilter.value = '';
        filterStores();
      };

      window.clearSearchFilter = function() {
        storeSearch.value = '';
        filterStores();
      };

      // Clear all filters
      clearFiltersBtn.addEventListener('click', function() {
        regionFilter.value = '';
        storeSearch.value = '';
        filterStores();
        
        // Add button feedback animation
        this.style.transform = 'scale(0.95)';
        setTimeout(() => {
          this.style.transform = 'scale(1)';
        }, 150);
      });

      // Show map functionality with Google Maps integration
      showMapBtn.addEventListener('click', function() {
        // Add button feedback animation
        this.style.transform = 'scale(0.95)';
        setTimeout(() => {
          this.style.transform = 'scale(1)';
        }, 150);
        
        showMapView();
      });

      // Map view functionality
      function showMapView() {
        const stores = [
          { name: 'FL Mint Miami Beach', lat: 25.7617, lng: -80.1918, city: 'Miami Beach' },
          { name: 'FL Mint Orlando Downtown', lat: 28.5383, lng: -81.3792, city: 'Orlando' },
          { name: 'FL Mint Tampa', lat: 27.9506, lng: -82.4572, city: 'Tampa' },
          { name: 'FL Mint Jacksonville', lat: 30.3322, lng: -81.6557, city: 'Jacksonville' }
        ];

        // Create Google Maps URL with all store locations
        const markers = stores.map(store => `${store.lat},${store.lng}`).join('|');
        const mapUrl = `https://www.google.com/maps?q=${markers}`;
        
        // Create a modal or new window with map
        const mapModal = document.createElement('div');
        mapModal.className = 'fixed inset-0 bg-black/50 z-50 flex items-center justify-center p-4';
        mapModal.innerHTML = `
          <div class="bg-white dark:bg-gray-800 rounded-2xl p-6 max-w-4xl w-full max-h-[90vh] overflow-y-auto">
            <div class="flex justify-between items-center mb-6">
              <h3 class="text-2xl font-bold text-gray-900 dark:text-white">Store Locations Map</h3>
              <button class="text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200" onclick="this.closest('.fixed').remove()">
                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                </svg>
              </button>
            </div>
            
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
              ${stores.map(store => `
                <div class="bg-gray-50 dark:bg-gray-700 rounded-xl p-4">
                  <h4 class="font-semibold text-gray-900 dark:text-white mb-2">${store.name}</h4>
                  <p class="text-sm text-gray-600 dark:text-gray-300 mb-3">${store.city}, Florida</p>
                  <button 
                    onclick="window.open('https://maps.google.com/?q=${store.lat},${store.lng}', '_blank')"
                    class="w-full bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 transition-colors text-sm font-medium"
                  >
                    View on Google Maps
                  </button>
                </div>
              `).join('')}
            </div>
            
            <div class="text-center">
              <button
                onclick="window.open('${mapUrl}', '_blank')"
                class="bg-gradient-to-r from-green-600 to-green-700 text-white px-6 py-3 rounded-xl hover:from-green-700 hover:to-green-800 transition-colors font-semibold shadow-lg"
              >
                View All Locations on Google Maps
              </button>
            </div>
          </div>
        `;
        
        document.body.appendChild(mapModal);
        
        // Close modal when clicking outside
        mapModal.addEventListener('click', function(e) {
          if (e.target === this) {
            this.remove();
          }
        });
      }

      // Enhanced search with debouncing
      let searchTimeout;
      storeSearch.addEventListener('input', function() {
        clearTimeout(searchTimeout);
        searchTimeout = setTimeout(filterStores, 300);
      });

      // Region filter change
      regionFilter.addEventListener('change', filterStores);

      // Region filter buttons with enhanced animation
      regionFilterBtns.forEach(btn => {
        btn.addEventListener('click', function() {
          const regionId = this.dataset.regionId;
          regionFilter.value = regionId;
          filterStores();
          
          // Add click animation
          this.style.transform = 'scale(0.95)';
          setTimeout(() => {
            this.style.transform = 'scale(1)';
          }, 150);
          
          // Scroll to stores section
          setTimeout(() => {
            document.getElementById('stores-grid').scrollIntoView({ 
              behavior: 'smooth',
              block: 'start'
            });
          }, 200);
        });
      });

      // Add hover effects to store cards
      storeCards.forEach(card => {
        card.addEventListener('mouseenter', function() {
          this.style.transform = 'translateY(-4px) scale(1.02)';
        });
        
        card.addEventListener('mouseleave', function() {
          this.style.transform = 'translateY(0) scale(1)';
        });
      });

      // Add intersection observer for scroll animations
      const observerOptions = {
        threshold: 0.1,
        rootMargin: '0px 0px -50px 0px'
      };

      const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            entry.target.style.opacity = '1';
            entry.target.style.transform = 'translateY(0)';
          }
        });
      }, observerOptions);

      // Observe all cards for scroll animations
      document.querySelectorAll('.store-card, .region-card').forEach(card => {
        card.style.opacity = '0';
        card.style.transform = 'translateY(20px)';
        card.style.transition = 'opacity 0.6s ease, transform 0.6s ease';
        observer.observe(card);
      });
    });
  </script>
</Layout>