---
export const prerender = true;

import Layout from '../layouts/Layout.astro';

// Initialize data arrays
let stores = [];
let categories = [];
let regions = [];
let apiError = null;

// Category icon mapping
function getCategoryIcon(slug) {
  const icons = {
    'flower': '🌿',
    'pre-rolls': '🚬',
    'vaporizers': '💨',
    'concentrates': '🍯',
    'edibles': '🍭',
    'topicals': '🧴',
    'cartridges': '🖊️',
    'tinctures': '💧',
    'accessories': '🔧',
    'cbd': '🌱'
  };
  return icons[slug] || '🌿';
}

// Category color mapping for variety
function getCategoryColor(index) {
  const colors = [
    'from-green-500 to-green-600',
    'from-yellow-400 to-yellow-500',
    'from-green-600 to-green-700',
    'from-yellow-500 to-yellow-600',
    'from-green-400 to-green-500',
    'from-yellow-300 to-yellow-400'
  ];
  return colors[index % colors.length];
}

const API_BASE = 'https://mintdealsbackend-production.up.railway.app/api';

try {

  // Fetch stores, categories, and regions in parallel
  const [storesResponse, categoriesResponse, regionsResponse] = await Promise.allSettled([
    fetch(`${API_BASE}/stores?populate=*&pagination[pageSize]=50`),
    fetch(`${API_BASE}/categories?populate=*&pagination[pageSize]=25`),
    fetch(`${API_BASE}/regions?populate=*&pagination[pageSize]=50`)
  ]);

  // Process stores
  if (storesResponse.status === 'fulfilled' && storesResponse.value.ok) {
    const data = await storesResponse.value.json();
    const storesData = data?.data || [];

    stores = storesData.map(store => {
      // Extract coordinates from geo field (JSON object with lat/lng)
      let latitude = null;
      let longitude = null;

      if (store.geo) {
        if (typeof store.geo === 'object') {
          latitude = store.geo.lat || store.geo.latitude || null;
          longitude = store.geo.lng || store.geo.lon || store.geo.longitude || null;
        } else if (typeof store.geo === 'string') {
          try {
            const geoObj = JSON.parse(store.geo);
            latitude = geoObj.lat || geoObj.latitude || null;
            longitude = geoObj.lng || geoObj.lon || geoObj.longitude || null;
          } catch (e) {
            console.error('Failed to parse geo string for store:', store.name);
          }
        }
      }

      // Helper function to get image URL from various possible structures
      function getImageUrl(imageData) {
        if (!imageData || imageData === null) return null;

        // Case 1: Strapi v4 nested structure
        if (imageData?.data?.attributes?.url) {
          const url = imageData.data.attributes.url;
          return url.startsWith('http') ? url : `https://mintdealsbackend-production.up.railway.app${url}`;
        }

        // Case 2: Direct image object with formats (Cloudinary)
        if (typeof imageData === 'object' && imageData.formats) {
          if (imageData.formats.large?.url) return imageData.formats.large.url;
          if (imageData.formats.medium?.url) return imageData.formats.medium.url;
          if (imageData.formats.small?.url) return imageData.formats.small.url;
          if (imageData.formats.thumbnail?.url) return imageData.formats.thumbnail.url;
        }

        // Case 3: Direct image object with url
        if (typeof imageData === 'object' && imageData.url) {
          const url = imageData.url;
          return url.startsWith('http') ? url : `https://mintdealsbackend-production.up.railway.app${url}`;
        }

        // Case 4: String URL directly
        if (typeof imageData === 'string') {
          return imageData.startsWith('http') ? imageData : `https://mintdealsbackend-production.up.railway.app${imageData}`;
        }

        return null;
      }

      // Get hero_media first, fallback to image
      const heroImage = getImageUrl(store.hero_media) || getImageUrl(store.image);

      return {
        id: store.id,
        documentId: store.documentId,
        name: store.name || 'Unnamed Store',
        slug: store.slug || store.documentId,
        address: {
          ...store.address,
          latitude: latitude,
          longitude: longitude
        },
        phone: store.phone,
        hours: store.hours,
        image: heroImage,
        isActive: store.is_active !== false
      };
    }).filter(store => store.isActive);
  }

  // Process categories
  if (categoriesResponse.status === 'fulfilled' && categoriesResponse.value.ok) {
    const data = await categoriesResponse.value.json();
    const categoriesData = data?.data || [];


    categories = categoriesData.map((category, index) => {
      // Check if it's Strapi v4 format (with attributes) or direct format
      const isV4 = !!category.attributes;
      const data = isV4 ? category.attributes : category;

      // Helper function to get image URL from various possible structures
      function getImageUrl(imageData) {
        if (!imageData || imageData === null) return null;

        // Case 1: Strapi v4 nested structure: image.data.attributes.url
        if (imageData?.data?.attributes?.url) {
          const url = imageData.data.attributes.url;
          return url.startsWith('http') ? url : `https://mintdealsbackend-production.up.railway.app${url}`;
        }

        // Case 2: Direct image object with formats (Cloudinary or Strapi uploaded images)
        if (typeof imageData === 'object' && imageData.formats) {
          // Prefer larger formats for better quality
          if (imageData.formats.large?.url) return imageData.formats.large.url;
          if (imageData.formats.medium?.url) return imageData.formats.medium.url;
          if (imageData.formats.small?.url) return imageData.formats.small.url;
          if (imageData.formats.thumbnail?.url) return imageData.formats.thumbnail.url;
        }

        // Case 3: Direct image object with url: image.url
        if (typeof imageData === 'object' && imageData.url) {
          const url = imageData.url;
          return url.startsWith('http') ? url : `https://mintdealsbackend-production.up.railway.app${url}`;
        }

        // Case 4: String URL directly
        if (typeof imageData === 'string') {
          return imageData.startsWith('http') ? imageData : `https://mintdealsbackend-production.up.railway.app${imageData}`;
        }

        return null;
      }

      // Try multiple possible image field names (case-insensitive variations)
      const imageUrl = getImageUrl(data.image)
        || getImageUrl(data.Image)
        || getImageUrl(data.IMAGE)
        || getImageUrl(category.image)
        || getImageUrl(category.Image)
        || null;

      return {
        id: category.id,
        documentId: category.documentId,
        title: data.Name || data.name || '',
        description: data.Discription || data.description || '',
        slug: data.Slug || data.slug || category.documentId || category.id,
        icon: getCategoryIcon(data.Slug || data.slug),
        image: imageUrl,
        isActive: true,
        productCount: data.products?.data?.length || data.products?.length || 0,
        colorGradient: getCategoryColor(index)
      };
    });

    // Filter and sort categories client-side
    categories = categories
      .filter(category => category.title && category.isActive)
      .sort((a, b) => a.title.localeCompare(b.title));
  }

  // Process regions
  if (regionsResponse.status === 'fulfilled' && regionsResponse.value.ok) {
    const data = await regionsResponse.value.json();
    const regionsData = data?.data || [];

    regions = regionsData.map((region) => {
      const isV4 = !!region.attributes;
      const data = isV4 ? region.attributes : region;

      // Helper function to get image URL
      function getImageUrl(imageData) {
        if (!imageData || imageData === null) return null;

        if (imageData?.data?.attributes?.url) {
          const url = imageData.data.attributes.url;
          return url.startsWith('http') ? url : `https://mintdealsbackend-production.up.railway.app${url}`;
        }

        if (typeof imageData === 'object' && imageData.formats) {
          if (imageData.formats.large?.url) return imageData.formats.large.url;
          if (imageData.formats.medium?.url) return imageData.formats.medium.url;
          if (imageData.formats.small?.url) return imageData.formats.small.url;
          if (imageData.formats.thumbnail?.url) return imageData.formats.thumbnail.url;
        }

        if (typeof imageData === 'object' && imageData.url) {
          const url = imageData.url;
          return url.startsWith('http') ? url : `https://mintdealsbackend-production.up.railway.app${url}`;
        }

        if (typeof imageData === 'string') {
          return imageData.startsWith('http') ? imageData : `https://mintdealsbackend-production.up.railway.app${imageData}`;
        }

        return null;
      }

      const imageUrl = getImageUrl(data.image)
        || getImageUrl(data.Image)
        || getImageUrl(data.IMAGE)
        || getImageUrl(region.image)
        || getImageUrl(region.Image)
        || null;

      return {
        id: region.id,
        documentId: region.documentId,
        name: data.name || data.Name || '',
        slug: data.slug || data.Slug || region.documentId || region.id,
        description: data.description || data.Description || '',
        image: imageUrl
      };
    });

    regions = regions.filter(region => region.name);
  }

} catch (error) {
  apiError = error instanceof Error ? error.message : 'Unknown error';
}
---
---

<style>
  body {
    margin: 0;
    padding: 0;
  }
  .video-background {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: -1;
    overflow: hidden;
  }
  .video-background::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-image: linear-gradient(to top, var(--theme-bg-start), var(--theme-bg-end));
    mix-blend-mode: color;
    pointer-events: none;
    z-index: 1;
    transition: background-image 0.5s ease;
  }
  .video-background video {
    object-fit: cover;
    height: 100%;
    width: 100%;
  }
  .content-wrapper {
    position: relative;
    z-index: 1;
    background: linear-gradient(to bottom, rgba(0,0,0,0.2), rgba(0,0,0,0.4));
  }
  .hero-section {
    min-height: 7.5vh; /* Half of original 15vh */
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 0.5rem 0;
  }

  .hero-section h1 {
    line-height: 1.2;
  }

  @media (min-width: 768px) {
    .hero-section {
      min-height: 30vh; /* Half of original 60vh */
      padding: 1rem 0;
    }
  }
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>

<Layout title="Mint Deals - Cannabis Dispensaries & Products" description="Find cannabis dispensaries, products, and deals. Your trusted source for premium cannabis products and information.">
  <!-- Video Background -->
  <div class="video-background">
    <video autoplay loop muted playsinline>
      <source src="https://video.wixstatic.com/video/d47472_58cce06729c54ccb935886c4b3647274/1080p/mp4/file.mp4" type="video/mp4">
    </video>
  </div>

  <!-- Content Wrapper -->
  <div class="content-wrapper">
    <!-- Hero Section -->
    <div class="text-white hero-section">
    <div class="px-8 mx-auto sm:px-12 lg:px-16 xl:px-20 max-w-[90%]">
      <div class="text-center">
        <div class="flex justify-center mb-6">
          <img
            src="/assets/Mint_Full_Logo.png"
            alt="Mint Deals Logo"
            class="w-full max-w-md md:max-w-2xl drop-shadow-2xl"
          />
        </div>
        <p class="max-w-2xl mx-auto mb-6 text-lg text-yellow-400 md:text-xl drop-shadow-lg">
          Your trusted source for premium cannabis products and information
        </p>
      </div>
    </div>
    </div>

  <!-- Lifestyle Polaroid Section -->
  <div class="py-4 md:py-8">
    <div class="px-8 sm:px-12 lg:px-16 xl:px-20">
      <div class="flex justify-center">
        <div class="relative w-full max-w-7xl h-[900px]">
          {/* Scattered Polaroid Cards */}
          <div id="polaroid-scatter" class="relative w-full h-full">
            {[
              { img: "20251001_1034_Joyful Moment Together_simple_compose_01k6gdah5ef7n9mj7hyscbm439.png", title: "Share Joy", vibe: "Social", x: "3%", y: "5%", rotate: -8 },
              { img: "20251001_1041_Serene Morning Ritual_simple_compose_01k6gdpzjeexe95stnx5nn3y9b.png", title: "Morning Zen", vibe: "Relaxation", x: "20%", y: "3%", rotate: 12 },
              { img: "20251001_1106_Festival Sunset Vibes_simple_compose_01k6gf43hcednabq9xzx5rk5tj.png", title: "Festival Fun", vibe: "Adventure", x: "38%", y: "6%", rotate: -5 },
              { img: "20251001_1118_Neon Night Stroll_simple_compose_01k6gftp4ae6r8g2b610xw1f4a.png", title: "Night Life", vibe: "Urban", x: "58%", y: "8%", rotate: 15 },
              { img: "20251001_1159_Beach Bonfire Gathering_simple_compose_01k6gj5gj9fedrvpngg8yaekat.png", title: "Beach Vibes", vibe: "Nature", x: "78%", y: "5%", rotate: -10 },
              { img: "20251001_1138_Jazz Club Vibes_simple_compose_01k6ggzbdeeefb6t68pprex49z.png", title: "Smooth Jazz", vibe: "Culture", x: "5%", y: "38%", rotate: 6 },
              { img: "20251001_1132_Morning Coffee Relaxation_simple_compose_01k6ggma8mermb81awhar60bvb.png", title: "Coffee Time", vibe: "Calm", x: "23%", y: "35%", rotate: -12 },
              { img: "20251001_1149_Backyard BBQ Gathering_simple_compose_01k6ghjj7ff7prsem7192hhz5f.png", title: "BBQ Party", vibe: "Social", x: "42%", y: "37%", rotate: 8 },
              { img: "20251001_1151_Café Conversations_simple_compose_01k6ghq23rfhhazmw46r48359k.png", title: "Café Chat", vibe: "Social", x: "62%", y: "36%", rotate: -6 },
              { img: "20251001_1128_Poolside Relaxation Scene_simple_compose_01k6ggdj0wep3tdxa7h4jvwad3.png", title: "Poolside", vibe: "Luxury", x: "80%", y: "40%", rotate: 14 },
              { img: "20251001_1141_Sunny Park Gathering_simple_compose_01k6gh5v42fx4a4gkbdpe9rvsb.png", title: "Park Day", vibe: "Nature", x: "7%", y: "68%", rotate: -9 },
              { img: "20251001_1134_Neon Festival Vibes_simple_compose_01k6ggrnptefd97cz55pkg4med.png", title: "Neon Nights", vibe: "Party", x: "25%", y: "67%", rotate: 11 },
              { img: "20251001_1117_Elegant Outdoor Gathering_simple_compose_01k6gfry32ff0a54fh49mtqpkq.png", title: "Elegant Eve", vibe: "Luxury", x: "44%", y: "70%", rotate: -7 },
              { img: "20251001_1130_Kitchen Gathering Joy_simple_compose_01k6ggh1vhe1gvqdd64sfj0web.png", title: "Kitchen Fun", vibe: "Home", x: "63%", y: "69%", rotate: 9 },
              { img: "20251001_1159_Hikers Sharing Moments_simple_compose_01k6gj53j5fryt2pcwbxmy67r0.png", title: "Trail Time", vibe: "Adventure", x: "82%", y: "72%", rotate: -13 }
            ].map((item, index) => (
              <div
                class="polaroid-scattered absolute bg-white rounded-lg shadow-2xl p-3 transition-all duration-700 hover:scale-110 hover:z-50 cursor-pointer"
                data-index={index}
                style={`left: ${item.x}; top: ${item.y}; transform: rotate(${item.rotate}deg); width: 280px; z-index: ${index + 1};`}
              >
                <div class="w-full h-64 bg-gray-200 overflow-hidden rounded">
                  <img
                    src={`/assets/lifestyleimages/${item.img}`}
                    alt={item.title}
                    class="w-full h-full object-cover"
                    loading="lazy"
                  />
                </div>
                <div class="mt-3 text-center">
                  <p class="text-lg font-bold text-gray-800" style="font-family: 'Permanent Marker', cursive;">{item.title}</p>
                  <p class="text-xs text-gray-600 italic">{item.vibe}</p>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Product Categories Section -->
  <div class="py-8">
    <div class="mb-6 px-8 sm:px-12 lg:px-16 xl:px-20">
      <h2 class="mb-3 text-3xl font-bold text-white text-center">
        Explore Product Categories
      </h2>
    </div>

    {apiError ? (
      <div class="py-12 text-center">
        <div class="max-w-md p-8 mx-auto bg-red-900 rounded-lg bg-opacity-80">
          <div class="mb-4 text-6xl text-red-400">⚠️</div>
          <h3 class="mb-2 text-lg font-medium text-red-200">API Error</h3>
          <p class="text-sm text-red-300">{apiError}</p>
        </div>
      </div>
    ) : categories.length > 0 ? (
      <div class="px-8 sm:px-12 lg:px-16 xl:px-20">
        {/* Bento Grid Layout */}
        <div class="grid grid-cols-1 md:grid-cols-4 lg:grid-cols-6 gap-1 auto-rows-[180px]">
          {categories.slice(0, 10).map((category, index) => {
            // Define bento grid sizes - some span more cells
            const bentoSizes = [
              'md:col-span-2 md:row-span-2', // 0: Large featured
              'md:col-span-2 md:row-span-2', // 1: Large featured (Indica)
              'md:col-span-2 md:row-span-1', // 2: Wide
              'md:col-span-2 md:row-span-2', // 3: Large featured
              'md:col-span-2 md:row-span-1', // 4: Wide
              'md:col-span-2 md:row-span-1', // 5: Wide
              'md:col-span-3 md:row-span-1', // 6: Extra wide
              'md:col-span-3 md:row-span-1', // 7: Extra wide
              'md:col-span-2 md:row-span-1', // 8: Regular
              'md:col-span-4 md:row-span-1', // 9: Full width
            ];

            return (
              <a
                href={`/${category.slug}`}
                class={`bento-card group relative overflow-hidden rounded-sm shadow-lg hover:shadow-xl transition-all duration-500 hover:scale-[1.01] ${bentoSizes[index] || 'md:col-span-2'}`}
              >
                {/* Background Image */}
                <div class="absolute inset-0">
                  {category.image ? (
                    <img
                      src={category.image}
                      alt={category.title}
                      class="w-full h-full object-cover group-hover:scale-110 transition-transform duration-700"
                    />
                  ) : (
                    <div class={`w-full h-full bg-gradient-to-br ${category.colorGradient}`}>
                      <div class="absolute inset-0 flex items-center justify-center opacity-20">
                        <span class="text-9xl">{category.icon}</span>
                      </div>
                    </div>
                  )}
                  {/* Gradient Overlay */}
                  <div class="absolute inset-0 bg-gradient-to-t from-black/90 via-black/50 to-transparent"></div>
                </div>

                {/* Content */}
                <div class="relative h-full flex flex-col justify-end p-6">
                  <div class="transform transition-transform duration-300 group-hover:translate-y-[-8px]">
                    <h3 class="text-2xl font-bold text-white mb-2 drop-shadow-lg">
                      {category.title}
                    </h3>
                    <p class="text-sm text-green-300 opacity-0 group-hover:opacity-100 transition-opacity duration-300 line-clamp-2">
                      {category.description || `Explore our ${category.title.toLowerCase()} collection`}
                    </p>
                    <div class="mt-3 flex items-center text-yellow-400 opacity-0 group-hover:opacity-100 transition-opacity duration-300">
                      <span class="text-sm font-medium">Explore</span>
                      <svg class="w-4 h-4 ml-2 transition-transform group-hover:translate-x-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                      </svg>
                    </div>
                  </div>
                </div>
              </a>
            );
          })}
        </div>

        {/* View All Link */}
        <div id="category-detail-panel" class="hidden">
            <div class="flex flex-col sm:flex-row items-start justify-between mb-4 md:mb-6 gap-4">
              <div class="flex items-center gap-3 md:gap-4 w-full sm:w-auto">
                <div id="detail-image-container" class="flex-shrink-0 w-16 h-16 md:w-20 md:h-20 overflow-hidden rounded-lg">
                  <img id="detail-image" src="" alt="" class="object-cover w-full h-full hidden" />
                  <div id="detail-icon-fallback" class="flex items-center justify-center w-full h-full bg-gradient-to-br from-green-500 to-green-600">
                    <span id="detail-icon" class="text-3xl md:text-4xl"></span>
                  </div>
                </div>
                <div class="flex-1">
                  <h3 id="detail-title" class="text-xl md:text-3xl font-bold text-white"></h3>
                  <p id="detail-count" class="text-sm md:text-lg text-green-400"></p>
                </div>
              </div>
              <button id="close-detail" class="p-2 transition-colors rounded-full hover:bg-green-900/20 self-start sm:self-auto">
                <svg class="w-6 h-6 text-yellow-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                </svg>
              </button>
            </div>

            <p id="detail-description" class="mb-4 md:mb-6 text-sm md:text-lg leading-relaxed text-green-300"></p>

            <a id="detail-link" href="#" class="inline-flex items-center px-4 md:px-6 py-2 md:py-3 text-sm md:text-base font-medium text-white transition-all transform rounded-lg shadow-lg bg-gradient-to-r from-yellow-400 to-transparent hover:from-yellow-500 hover:to-transparent hover:scale-105">
              View Products
              <svg class="w-4 h-4 md:w-5 md:h-5 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
              </svg>
            </a>
          </div>
        </div>
      ) : (
        <div class="py-12 text-center">
          <div class="max-w-md p-8 mx-auto bg-black border-2 border-green-500 rounded-lg">
            <div class="mb-4 text-6xl">🌿</div>
            <h3 class="mb-2 text-lg font-medium text-yellow-400">Categories Coming Soon</h3>
            <p class="text-green-300">Product categories will be available here.</p>
          </div>
        </div>
      )}

      <div class="mt-12 text-right">
        <a href="/categories" class="text-yellow-400 hover:text-yellow-300 transition-colors underline">
          View All Categories →
        </a>
      </div>
    </div>
  </div>

  <!-- Regions Section -->
  <div class="py-16">
    <div class="px-8 mx-auto sm:px-12 lg:px-16 xl:px-20 max-w-[90%]">
      <div class="mb-8 text-right">
        <h2 class="mb-3 text-2xl font-bold text-white md:text-3xl">
          Shop by Region
        </h2>
      </div>

      {regions.length > 0 ? (
        <div class="relative">
          {/* Carousel Navigation Buttons */}
          <button
            id="regions-prev"
            class="absolute left-0 z-10 flex items-center justify-center w-10 h-10 transition-all transform -translate-y-1/2 bg-black border-2 border-green-500 rounded-full top-1/2 hover:border-yellow-400 hover:scale-110"
            aria-label="Previous regions"
          >
            <svg class="w-6 h-6 text-yellow-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
            </svg>
          </button>

          <button
            id="regions-next"
            class="absolute right-0 z-10 flex items-center justify-center w-10 h-10 transition-all transform -translate-y-1/2 bg-black border-2 border-green-500 rounded-full top-1/2 hover:border-yellow-400 hover:scale-110"
            aria-label="Next regions"
          >
            <svg class="w-6 h-6 text-yellow-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
            </svg>
          </button>

          {/* Carousel Container */}
          <div class="overflow-hidden">
            <div id="regions-carousel" class="flex gap-6 transition-transform duration-500 ease-out">
              {regions.map((region) => (
                <a
                  href={`/region/${region.slug}`}
                  class="relative flex-shrink-0 overflow-hidden transition-all transform bg-black group rounded-xl hover:scale-105 shadow-lg hover:shadow-2xl w-72"
                >
                  {/* Region Image */}
                  {region.image ? (
                    <div class="h-40 overflow-hidden bg-gradient-to-br from-green-900/30 to-black/50">
                      <img
                        src={region.image}
                        alt={region.name}
                        class="object-cover w-full h-full transition-opacity opacity-80 group-hover:opacity-100"
                      />
                    </div>
                  ) : (
                    <div class="h-40 bg-gradient-to-br from-green-600 to-green-700 flex items-center justify-center">
                      <span class="text-5xl">📍</span>
                    </div>
                  )}

                  {/* Region Content */}
                  <div class="p-4">
                    <h3 class="mb-1 text-lg font-bold text-white">
                      {region.name}
                    </h3>
                    {region.description && (
                      <p class="mb-2 text-xs text-green-300 line-clamp-2">
                        {region.description}
                      </p>
                    )}
                    <div class="flex items-center justify-between">
                      <span class="text-xs text-green-400">
                        View stores
                      </span>
                      <span class="text-yellow-400 transition-transform group-hover:translate-x-1">
                        →
                      </span>
                    </div>
                  </div>
                </a>
              ))}
            </div>
          </div>
        </div>
      ) : (
        <div class="py-12 text-center">
          <div class="max-w-md p-8 mx-auto bg-black border-2 border-green-500 rounded-lg">
            <div class="mb-4 text-6xl">📍</div>
            <h3 class="mb-2 text-lg font-medium text-yellow-400">Regions Coming Soon</h3>
            <p class="text-green-300">Regional information will be available here.</p>
          </div>
        </div>
      )}

      <div class="mt-12 text-right">
        <a href="/regions" class="text-yellow-400 hover:text-yellow-300 transition-colors underline">
          View All Regions →
        </a>
      </div>
    </div>
  </div>

  <!-- Featured Locations Section -->
  <div class="py-16">
    <div class="px-8 mx-auto sm:px-12 lg:px-16 xl:px-20 max-w-[90%]">
      <div class="mb-8 text-center">
        <h2 class="mb-3 text-2xl font-bold text-white md:text-3xl">
          Featured Locations
        </h2>
      </div>

      {apiError ? (
        <div class="py-12 text-center">
          <div class="max-w-md p-8 mx-auto rounded-lg bg-red-50 dark:bg-red-900">
            <div class="mb-4 text-6xl text-red-600 dark:text-red-400">⚠️</div>
            <h3 class="mb-2 text-lg font-medium text-red-800 dark:text-red-200">API Error</h3>
            <p class="text-sm text-red-600 dark:text-red-300">{apiError}</p>
          </div>
        </div>
      ) : stores.length > 0 ? (
        <div>
          <!-- Location Status Bar -->
          <div id="location-status" class="hidden p-4 mb-6 text-center border border-green-500 rounded-lg bg-green-900/50">
            <div id="location-loading" class="flex items-center justify-center gap-3">
              <div class="w-5 h-5 border-b-2 border-yellow-400 rounded-full animate-spin"></div>
              <span class="text-yellow-400">Getting your location to show nearest stores...</span>
            </div>
            <div id="location-success" class="hidden text-green-300">
              📍 Showing stores near you
            </div>
            <div id="location-error" class="hidden text-yellow-400">
              📍 Location unavailable - showing all stores
            </div>
          </div>

          <div id="stores-list" class="space-y-12">
            {stores.slice(0, 3).map((store, index) => (
              <div
                class="store-card overflow-hidden bg-black rounded-xl shadow-xl"
                data-store-id={store.id}
                data-lat={store.address?.latitude || ''}
                data-lng={store.address?.longitude || ''}
                data-name={store.name}
              >
                {/* Alternating layout: even index = image left, odd index = image right */}
                <div class={`grid grid-cols-1 md:grid-cols-2 gap-0 ${index % 2 === 1 ? 'md:flex-row-reverse' : ''}`}>
                  {/* Image Section */}
                  <div class={`relative h-64 md:h-auto ${index % 2 === 1 ? 'md:order-2' : ''}`}>
                    {store.image ? (
                      <img
                        src={store.image}
                        alt={store.name}
                        class="object-cover w-full h-full"
                      />
                    ) : (
                      <div class="flex items-center justify-center w-full h-full bg-gradient-to-br from-green-900/30 to-black/50">
                        <span class="text-6xl">🏪</span>
                      </div>
                    )}
                    {/* Distance Badge */}
                    <span class="store-distance hidden absolute top-4 right-4 px-3 py-1.5 text-sm font-medium text-white bg-green-900/90 rounded-lg backdrop-blur-sm"></span>
                  </div>

                  {/* Text Section */}
                  <div class={`flex flex-col justify-center p-8 md:p-12 ${index % 2 === 1 ? 'md:order-1' : ''}`}>
                    <h3 class="mb-4 text-2xl font-bold text-white md:text-3xl">
                      {store.name}
                    </h3>

                    {store.address && (
                      <div class="flex items-start mb-4 text-green-300">
                        <svg class="w-6 h-6 mr-3 mt-0.5 text-green-500 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"/>
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"/>
                        </svg>
                        <div>
                          <p class="text-lg">{store.address.city}, {store.address.state}</p>
                        </div>
                      </div>
                    )}

                    {store.phone && (
                      <div class="flex items-center mb-6 text-green-300">
                        <svg class="w-6 h-6 mr-3 text-green-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"/>
                        </svg>
                        <p class="text-lg">{store.phone}</p>
                      </div>
                    )}

                    <a
                      href={`/location/${store.slug}`}
                      class="inline-flex items-center px-6 py-3 text-base font-medium text-white transition-all transform rounded-lg shadow-lg w-fit bg-gradient-to-r from-yellow-400 to-transparent hover:from-yellow-500 hover:to-transparent hover:scale-105"
                    >
                      View Details
                      <svg class="w-5 h-5 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                      </svg>
                    </a>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      ) : (
        <div class="py-12 text-center">
          <div class="max-w-md p-8 mx-auto bg-black border-2 border-green-500 rounded-lg">
            <h3 class="mb-2 text-lg font-medium text-yellow-400">No Locations Available</h3>
            <p class="text-green-300">Location information will be displayed here.</p>
          </div>
        </div>
      )}

      <div class="mt-12 text-right">
        <a href="/stores" class="text-yellow-400 hover:text-yellow-300 transition-colors underline">
          View All Locations →
        </a>
      </div>
    </div>
  </div>

  <!-- About Section -->
  <div class="py-16">
    <div class="px-8 mx-auto sm:px-12 lg:px-16 xl:px-20 max-w-[90%]">
      <div class="mb-8 text-center">
        <h2 class="mb-3 text-2xl font-bold text-white md:text-3xl">
          Why Choose Mint Deals
        </h2>
        <p class="text-lg text-green-300">
          Your trusted partner in cannabis discovery
        </p>
      </div>

      <div class="grid grid-cols-1 gap-8 md:grid-cols-3 xl:gap-12">
        <!-- Feature 1 -->
        <a href="/stores" class="p-6 transition-all bg-black border-2 border-green-500 rounded-lg shadow-lg hover:border-yellow-400 hover:scale-105 transform group">
          <div class="flex items-center justify-center w-12 h-12 mb-4 bg-green-900 rounded-lg group-hover:bg-green-800">
            <svg class="w-8 h-8 text-yellow-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"></path>
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"></path>
            </svg>
          </div>
          <h3 class="mb-3 text-xl font-bold text-yellow-400 group-hover:text-yellow-300">Find Locations</h3>
          <p class="text-green-300">
            Discover trusted dispensaries near you with detailed information and directions.
          </p>
          <div class="mt-4 flex items-center text-yellow-400 group-hover:text-yellow-300">
            <span class="text-sm font-medium">View All Stores</span>
            <svg class="w-4 h-4 ml-2 transition-transform group-hover:translate-x-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
            </svg>
          </div>
        </a>

        <!-- Feature 2 -->
        <a href="/categories" class="p-6 transition-all bg-black border-2 border-green-500 rounded-lg shadow-lg hover:border-yellow-400 hover:scale-105 transform group">
          <div class="flex items-center justify-center w-12 h-12 mb-4 bg-green-900 rounded-lg group-hover:bg-green-800">
            <svg class="w-8 h-8 text-yellow-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
            </svg>
          </div>
          <h3 class="mb-3 text-xl font-bold text-yellow-400 group-hover:text-yellow-300">Browse Products</h3>
          <p class="text-green-300">
            Explore comprehensive product information and educational resources.
          </p>
          <div class="mt-4 flex items-center text-yellow-400 group-hover:text-yellow-300">
            <span class="text-sm font-medium">View All Categories</span>
            <svg class="w-4 h-4 ml-2 transition-transform group-hover:translate-x-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
            </svg>
          </div>
        </a>

        <!-- Feature 3 -->
        <a href="/deals" class="p-6 transition-all bg-black border-2 border-green-500 rounded-lg shadow-lg hover:border-yellow-400 hover:scale-105 transform group">
          <div class="flex items-center justify-center w-12 h-12 mb-4 bg-green-900 rounded-lg group-hover:bg-green-800">
            <svg class="w-8 h-8 text-yellow-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
          </div>
          <h3 class="mb-3 text-xl font-bold text-yellow-400 group-hover:text-yellow-300">Find Deals</h3>
          <p class="text-green-300">
            Discover the latest deals and promotions from dispensaries near you.
          </p>
          <div class="mt-4 flex items-center text-yellow-400 group-hover:text-yellow-300">
            <span class="text-sm font-medium">View All Deals</span>
            <svg class="w-4 h-4 ml-2 transition-transform group-hover:translate-x-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
            </svg>
          </div>
        </a>
      </div>
    </div>
  </div>
  </div>

  <!-- Categories interactive panel script -->
  <script>
    document.addEventListener('DOMContentLoaded', () => {
      const categoryCards = document.querySelectorAll('.category-card');
      const detailPanel = document.getElementById('category-detail-panel');
      const closeBtn = document.getElementById('close-detail');

      const detailImage = document.getElementById('detail-image');
      const detailIcon = document.getElementById('detail-icon');
      const detailIconFallback = document.getElementById('detail-icon-fallback');
      const detailTitle = document.getElementById('detail-title');
      const detailCount = document.getElementById('detail-count');
      const detailDescription = document.getElementById('detail-description');
      const detailLink = document.getElementById('detail-link');

      // Check if we're on mobile
      const isMobile = () => window.innerWidth < 768;

      // Handle category card clicks
      categoryCards.forEach(card => {
        const header = card.querySelector('.category-header');
        const content = card.querySelector('.category-content');
        const arrow = card.querySelector('.category-arrow');

        header.addEventListener('click', () => {
          if (isMobile()) {
            // Mobile: Toggle in-card expansion
            const isExpanded = content.style.maxHeight && content.style.maxHeight !== '0px';

            // Close all other cards
            categoryCards.forEach(otherCard => {
              if (otherCard !== card) {
                const otherContent = otherCard.querySelector('.category-content');
                const otherArrow = otherCard.querySelector('.category-arrow');
                otherContent.style.maxHeight = '0';
                otherArrow.classList.remove('rotate-180');
              }
            });

            // Toggle current card
            if (isExpanded) {
              content.style.maxHeight = '0';
              arrow.classList.remove('rotate-180');
            } else {
              content.style.maxHeight = content.scrollHeight + 'px';
              arrow.classList.add('rotate-180');
            }
          } else {
            // Desktop: Show side panel
            const title = card.dataset.categoryTitle;
            const description = card.dataset.categoryDescription;
            const count = card.dataset.categoryCount;
            const slug = card.dataset.categorySlug;
            const icon = card.dataset.categoryIcon;
            const image = card.dataset.categoryImage;

            // Update panel content
            detailTitle.textContent = title;
            detailCount.textContent = `${count} products available`;
            detailDescription.textContent = description || `Explore our selection of ${title.toLowerCase()} products.`;
            detailLink.href = `/${slug}`;

            // Show image or icon
            if (image) {
              detailImage.src = image;
              detailImage.alt = title;
              detailImage.classList.remove('hidden');
              detailIconFallback.classList.add('hidden');
            } else {
              detailImage.classList.add('hidden');
              detailIconFallback.classList.remove('hidden');
              detailIcon.textContent = icon;
            }

            // Show panel
            detailPanel.classList.remove('opacity-0', 'pointer-events-none');
            detailPanel.classList.add('opacity-100', 'pointer-events-auto');
          }
        });
      });

      // Close detail panel (desktop only)
      if (closeBtn) {
        closeBtn.addEventListener('click', () => {
          detailPanel.classList.remove('opacity-100', 'pointer-events-auto');
          detailPanel.classList.add('opacity-0', 'pointer-events-none');
        });
      }

      // Handle window resize
      let resizeTimer;
      window.addEventListener('resize', () => {
        clearTimeout(resizeTimer);
        resizeTimer = setTimeout(() => {
          // Close all mobile expansions when switching to desktop
          if (!isMobile()) {
            categoryCards.forEach(card => {
              const content = card.querySelector('.category-content');
              const arrow = card.querySelector('.category-arrow');
              content.style.maxHeight = '0';
              arrow.classList.remove('rotate-180');
            });
          } else {
            // Close desktop panel when switching to mobile
            detailPanel.classList.remove('opacity-100', 'pointer-events-auto');
            detailPanel.classList.add('opacity-0', 'pointer-events-none');
          }
        }, 250);
      });
    });
  </script>

  <!-- Polaroid Scatter Animation Script -->
  <script>
    document.addEventListener('DOMContentLoaded', () => {
      const polaroidCards = document.querySelectorAll('.polaroid-scattered');

      if (polaroidCards.length === 0) return;

      // Store original positions for each card
      const originalPositions = Array.from(polaroidCards).map(card => ({
        x: card.style.left,
        y: card.style.top,
        rotate: parseInt(card.style.transform.match(/rotate\((-?\d+)deg\)/)?.[1] || 0)
      }));

      // Function to shuffle polaroids
      function shufflePolaroids() {
        polaroidCards.forEach((card, index) => {
          // Generate new random position
          const newX = Math.random() * 70 + 5; // 5% to 75%
          const newY = Math.random() * 50 + 5; // 5% to 55%
          const newRotate = (Math.random() - 0.5) * 30; // -15 to +15 degrees
          const newZ = Math.floor(Math.random() * polaroidCards.length) + 1;

          // Animate to new position
          card.style.transition = 'all 1.2s cubic-bezier(0.34, 1.56, 0.64, 1)';
          card.style.left = `${newX}%`;
          card.style.top = `${newY}%`;
          card.style.transform = `rotate(${newRotate}deg)`;
          card.style.zIndex = newZ;
        });
      }

      // Shuffle every 5 seconds
      setInterval(shufflePolaroids, 5000);

      // Click to bring to front
      polaroidCards.forEach((card) => {
        card.addEventListener('click', () => {
          // Reset all z-indexes
          polaroidCards.forEach((c, i) => {
            c.style.zIndex = i + 1;
          });
          // Bring clicked card to front
          card.style.zIndex = 100;
        });
      });

      // Add subtle floating animation to each polaroid
      polaroidCards.forEach((card, index) => {
        const delay = Math.random() * 2;
        const duration = 3 + Math.random() * 2;

        // Store current rotation for animation
        const currentRotation = parseInt(card.style.transform.match(/rotate\((-?\d+)deg\)/)?.[1] || 0);
        card.style.setProperty('--rotation', `${currentRotation}deg`);
      });
    });
  </script>

  <!-- Regions carousel script -->
  <script>
    document.addEventListener('DOMContentLoaded', () => {
      const carousel = document.getElementById('regions-carousel');
      const prevBtn = document.getElementById('regions-prev');
      const nextBtn = document.getElementById('regions-next');

      if (!carousel || !prevBtn || !nextBtn) return;

      let currentPosition = 0;
      const cardWidth = 288 + 24; // 288px (w-72) + 24px gap
      const visibleCards = Math.floor(carousel.parentElement.offsetWidth / cardWidth);
      const totalCards = carousel.children.length;
      const maxPosition = -(totalCards - visibleCards) * cardWidth;

      // Update button states
      function updateButtons() {
        prevBtn.disabled = currentPosition >= 0;
        nextBtn.disabled = currentPosition <= maxPosition;

        prevBtn.style.opacity = currentPosition >= 0 ? '0.5' : '1';
        nextBtn.style.opacity = currentPosition <= maxPosition ? '0.5' : '1';
      }

      // Scroll to previous
      prevBtn.addEventListener('click', () => {
        if (currentPosition < 0) {
          currentPosition += cardWidth;
          if (currentPosition > 0) currentPosition = 0;
          carousel.style.transform = `translateX(${currentPosition}px)`;
          updateButtons();
        }
      });

      // Scroll to next
      nextBtn.addEventListener('click', () => {
        if (currentPosition > maxPosition) {
          currentPosition -= cardWidth;
          if (currentPosition < maxPosition) currentPosition = maxPosition;
          carousel.style.transform = `translateX(${currentPosition}px)`;
          updateButtons();
        }
      });

      // Initial button state
      updateButtons();

      // Update on window resize
      window.addEventListener('resize', () => {
        const newVisibleCards = Math.floor(carousel.parentElement.offsetWidth / cardWidth);
        const newMaxPosition = -(totalCards - newVisibleCards) * cardWidth;

        if (currentPosition < newMaxPosition) {
          currentPosition = newMaxPosition;
          carousel.style.transform = `translateX(${currentPosition}px)`;
        }

        updateButtons();
      });
    });
  </script>

  <!-- Location-based sorting script -->
  <script>
    // Haversine formula to calculate distance between two coordinates
    function calculateDistance(lat1, lon1, lat2, lon2) {
      const R = 3958.756; // Earth's radius in miles
      const dLat = (lat2 - lat1) * Math.PI / 180;
      const dLon = (lon2 - lon1) * Math.PI / 180;

      const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
                Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
                Math.sin(dLon / 2) * Math.sin(dLon / 2);

      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
      const distance = R * c;

      return distance;
    }

    // Format distance display
    function formatDistance(distance) {
      if (distance < 1) {
        return `${(distance * 5280).toFixed(0)} ft`;
      } else {
        return `${distance.toFixed(1)} mi`;
      }
    }

    // Sort stores by distance and update display
    function sortStoresByDistance(userLat, userLon) {
      const storeCards = Array.from(document.querySelectorAll('.store-card'));
      const storesList = document.getElementById('stores-list');

      // Calculate distances and store in array
      const storesWithDistance = storeCards.map(card => {
        const lat = parseFloat(card.dataset.lat);
        const lng = parseFloat(card.dataset.lng);

        let distance = Infinity;
        if (lat && lng && !isNaN(lat) && !isNaN(lng)) {
          distance = calculateDistance(userLat, userLon, lat, lng);
        }

        return {
          element: card,
          distance: distance,
          name: card.dataset.name
        };
      });

      // Sort by distance (closest first)
      storesWithDistance.sort((a, b) => a.distance - b.distance);

      // Update DOM order and add distance labels
      storesWithDistance.forEach((store, index) => {
        // Update distance display
        const distanceElement = store.element.querySelector('.store-distance');
        if (store.distance !== Infinity) {
          distanceElement.textContent = formatDistance(store.distance);
          distanceElement.classList.remove('hidden');
        }

        // Update alternating layout for the new order
        const gridContainer = store.element.querySelector('.grid');
        const imageSection = store.element.querySelector('.relative.h-64');
        const textSection = store.element.querySelector('.flex.flex-col');

        if (gridContainer && imageSection && textSection) {
          // Remove existing order classes
          imageSection.classList.remove('md:order-1', 'md:order-2');
          textSection.classList.remove('md:order-1', 'md:order-2');

          // Apply new order based on index
          if (index % 2 === 1) {
            // Odd index: image on right
            imageSection.classList.add('md:order-2');
            textSection.classList.add('md:order-1');
          } else {
            // Even index: image on left (default, but explicit for clarity)
            imageSection.classList.remove('md:order-2');
            textSection.classList.remove('md:order-1');
          }
        }

        // Re-append to change order (this will re-sort the stores)
        storesList.appendChild(store.element);
      });

      console.log('🏪 Stores sorted by distance:', storesWithDistance.map(s => ({ name: s.name, distance: s.distance.toFixed(1) + ' mi' })));
    }

    // Main geolocation function
    function setupLocationSorting() {
      const locationStatus = document.getElementById('location-status');
      const locationLoading = document.getElementById('location-loading');
      const locationSuccess = document.getElementById('location-success');
      const locationError = document.getElementById('location-error');

      // Show status bar
      locationStatus.classList.remove('hidden');

      // Check if geolocation is supported
      if (!navigator.geolocation) {
        console.log('📍 Geolocation not supported');
        locationLoading.classList.add('hidden');
        locationError.classList.remove('hidden');
        return;
      }

      // Get user's location
      navigator.geolocation.getCurrentPosition(
        (position) => {
          const userLat = position.coords.latitude;
          const userLon = position.coords.longitude;

          console.log('📍 User location obtained:', { lat: userLat, lon: userLon });

          // Update UI
          locationLoading.classList.add('hidden');
          locationSuccess.classList.remove('hidden');

          // Sort stores by distance
          sortStoresByDistance(userLat, userLon);

          // Hide status after 3 seconds
          setTimeout(() => {
            locationStatus.style.transition = 'opacity 0.5s ease-out';
            locationStatus.style.opacity = '0';
            setTimeout(() => {
              locationStatus.classList.add('hidden');
              locationStatus.style.opacity = '1';
            }, 500);
          }, 3000);
        },
        (error) => {
          console.log('📍 Geolocation error:', error.message);

          // Update UI for error
          locationLoading.classList.add('hidden');
          locationError.classList.remove('hidden');

          // Hide status after 3 seconds
          setTimeout(() => {
            locationStatus.style.transition = 'opacity 0.5s ease-out';
            locationStatus.style.opacity = '0';
            setTimeout(() => {
              locationStatus.classList.add('hidden');
              locationStatus.style.opacity = '1';
            }, 500);
          }, 3000);
        },
        {
          enableHighAccuracy: true,
          timeout: 10000,
          maximumAge: 300000 // 5 minutes
        }
      );
    }

    // Initialize when DOM is loaded
    document.addEventListener('DOMContentLoaded', () => {
      // Only run if we have stores on the page
      if (document.querySelectorAll('.store-card').length > 0) {
        setupLocationSorting();
      }
    });
  </script>

  <!-- Category Card Parallax Script -->
  <script>
    document.addEventListener('DOMContentLoaded', () => {
      const categoryCards = document.querySelectorAll('.bento-card');

      // Parallax effect on scroll
      function handleScroll() {
        categoryCards.forEach((card) => {
          const rect = card.getBoundingClientRect();
          const scrollProgress = (window.innerHeight - rect.top) / (window.innerHeight + rect.height);

          // Only apply parallax when card is in viewport
          if (scrollProgress > 0 && scrollProgress < 1) {
            const img = card.querySelector('img');
            if (img) {
              // Move background image slower than scroll (parallax effect)
              const translateY = (scrollProgress - 0.5) * 30;
              const scale = 1 + (scrollProgress * 0.1);
              img.style.transform = `translateY(${translateY}px) scale(${scale})`;
            }
          }
        });
      }

      // Mouse move parallax effect
      function handleMouseMove(e) {
        const mouseX = e.clientX / window.innerWidth;
        const mouseY = e.clientY / window.innerHeight;

        categoryCards.forEach((card) => {
          const rect = card.getBoundingClientRect();
          const cardCenterX = rect.left + rect.width / 2;
          const cardCenterY = rect.top + rect.height / 2;

          // Calculate distance from mouse to card center
          const distanceX = (e.clientX - cardCenterX) / window.innerWidth;
          const distanceY = (e.clientY - cardCenterY) / window.innerHeight;

          const img = card.querySelector('img');
          if (img) {
            // Apply subtle tilt and movement based on mouse position
            const moveX = distanceX * 15;
            const moveY = distanceY * 15;
            img.style.transform = `translate(${moveX}px, ${moveY}px) scale(1.1)`;
            img.style.transition = 'transform 0.3s ease-out';
          }
        });
      }

      // Intersection Observer for reveal animations
      const observer = new IntersectionObserver((entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            const img = entry.target.querySelector('img');
            if (img) {
              img.style.animation = 'parallaxReveal 0.8s ease-out forwards';
            }
          }
        });
      }, { threshold: 0.1 });

      categoryCards.forEach((card) => observer.observe(card));

      // Event listeners
      let ticking = false;
      window.addEventListener('scroll', () => {
        if (!ticking) {
          window.requestAnimationFrame(() => {
            handleScroll();
            ticking = false;
          });
          ticking = true;
        }
      });

      document.addEventListener('mousemove', handleMouseMove);

      // Initial call
      handleScroll();
    });
  </script>

  <style>
    @keyframes parallaxReveal {
      from {
        transform: scale(1.2) translateY(20px);
        opacity: 0;
      }
      to {
        transform: scale(1.1) translateY(0);
        opacity: 1;
      }
    }
  </style>
</Layout>