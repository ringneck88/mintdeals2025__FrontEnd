---
export const prerender = true;

import Layout from '../layouts/Layout.astro';

// Initialize data arrays
let stores = [];
let categories = [];
let regions = [];
let apiError = null;

// Category icon mapping
function getCategoryIcon(slug) {
  const icons = {
    'flower': '🌿',
    'pre-rolls': '🚬',
    'vaporizers': '💨',
    'concentrates': '🍯',
    'edibles': '🍭',
    'topicals': '🧴',
    'cartridges': '🖊️',
    'tinctures': '💧',
    'accessories': '🔧',
    'cbd': '🌱'
  };
  return icons[slug] || '🌿';
}

// Category color mapping for variety
function getCategoryColor(index) {
  const colors = [
    'from-green-500 to-green-600',
    'from-yellow-400 to-yellow-500',
    'from-green-600 to-green-700',
    'from-yellow-500 to-yellow-600',
    'from-green-400 to-green-500',
    'from-yellow-300 to-yellow-400'
  ];
  return colors[index % colors.length];
}

const API_BASE = 'https://mintdealsbackend-production.up.railway.app/api';

try {

  // Fetch stores, categories, and regions in parallel
  const [storesResponse, categoriesResponse, regionsResponse] = await Promise.allSettled([
    fetch(`${API_BASE}/stores?populate=*&pagination[pageSize]=50`),
    fetch(`${API_BASE}/categories?populate=*&pagination[pageSize]=25`),
    fetch(`${API_BASE}/regions?populate=*&pagination[pageSize]=50`)
  ]);

  // Process stores
  if (storesResponse.status === 'fulfilled' && storesResponse.value.ok) {
    const data = await storesResponse.value.json();
    const storesData = data?.data || [];

    stores = storesData.map(store => {
      // Extract coordinates from geo field (JSON object with lat/lng)
      let latitude = null;
      let longitude = null;

      if (store.geo) {
        if (typeof store.geo === 'object') {
          latitude = store.geo.lat || store.geo.latitude || null;
          longitude = store.geo.lng || store.geo.lon || store.geo.longitude || null;
        } else if (typeof store.geo === 'string') {
          try {
            const geoObj = JSON.parse(store.geo);
            latitude = geoObj.lat || geoObj.latitude || null;
            longitude = geoObj.lng || geoObj.lon || geoObj.longitude || null;
          } catch (e) {
            console.error('Failed to parse geo string for store:', store.name);
          }
        }
      }

      return {
        id: store.id,
        documentId: store.documentId,
        name: store.name || 'Unnamed Store',
        slug: store.slug || store.documentId,
        address: {
          ...store.address,
          latitude: latitude,
          longitude: longitude
        },
        phone: store.phone,
        hours: store.hours,
        image: store.image?.url ? `https://mintdealsbackend-production.up.railway.app${store.image.url}` : null,
        isActive: store.is_active !== false
      };
    }).filter(store => store.isActive);
  }

  // Process categories
  if (categoriesResponse.status === 'fulfilled' && categoriesResponse.value.ok) {
    const data = await categoriesResponse.value.json();
    const categoriesData = data?.data || [];


    categories = categoriesData.map((category, index) => {
      // Check if it's Strapi v4 format (with attributes) or direct format
      const isV4 = !!category.attributes;
      const data = isV4 ? category.attributes : category;

      // Helper function to get image URL from various possible structures
      function getImageUrl(imageData) {
        if (!imageData || imageData === null) return null;

        // Case 1: Strapi v4 nested structure: image.data.attributes.url
        if (imageData?.data?.attributes?.url) {
          const url = imageData.data.attributes.url;
          return url.startsWith('http') ? url : `https://mintdealsbackend-production.up.railway.app${url}`;
        }

        // Case 2: Direct image object with formats (Cloudinary or Strapi uploaded images)
        if (typeof imageData === 'object' && imageData.formats) {
          // Prefer larger formats for better quality
          if (imageData.formats.large?.url) return imageData.formats.large.url;
          if (imageData.formats.medium?.url) return imageData.formats.medium.url;
          if (imageData.formats.small?.url) return imageData.formats.small.url;
          if (imageData.formats.thumbnail?.url) return imageData.formats.thumbnail.url;
        }

        // Case 3: Direct image object with url: image.url
        if (typeof imageData === 'object' && imageData.url) {
          const url = imageData.url;
          return url.startsWith('http') ? url : `https://mintdealsbackend-production.up.railway.app${url}`;
        }

        // Case 4: String URL directly
        if (typeof imageData === 'string') {
          return imageData.startsWith('http') ? imageData : `https://mintdealsbackend-production.up.railway.app${imageData}`;
        }

        return null;
      }

      // Try multiple possible image field names (case-insensitive variations)
      const imageUrl = getImageUrl(data.image)
        || getImageUrl(data.Image)
        || getImageUrl(data.IMAGE)
        || getImageUrl(category.image)
        || getImageUrl(category.Image)
        || null;

      return {
        id: category.id,
        documentId: category.documentId,
        title: data.Name || data.name || '',
        description: data.Discription || data.description || '',
        slug: data.Slug || data.slug || category.documentId || category.id,
        icon: getCategoryIcon(data.Slug || data.slug),
        image: imageUrl,
        isActive: true,
        productCount: data.products?.data?.length || data.products?.length || 0,
        colorGradient: getCategoryColor(index)
      };
    });

    // Filter and sort categories client-side
    categories = categories
      .filter(category => category.title && category.isActive)
      .sort((a, b) => a.title.localeCompare(b.title));
  }

  // Process regions
  if (regionsResponse.status === 'fulfilled' && regionsResponse.value.ok) {
    const data = await regionsResponse.value.json();
    const regionsData = data?.data || [];

    regions = regionsData.map((region) => {
      const isV4 = !!region.attributes;
      const data = isV4 ? region.attributes : region;

      // Helper function to get image URL
      function getImageUrl(imageData) {
        if (!imageData || imageData === null) return null;

        if (imageData?.data?.attributes?.url) {
          const url = imageData.data.attributes.url;
          return url.startsWith('http') ? url : `https://mintdealsbackend-production.up.railway.app${url}`;
        }

        if (typeof imageData === 'object' && imageData.formats) {
          if (imageData.formats.large?.url) return imageData.formats.large.url;
          if (imageData.formats.medium?.url) return imageData.formats.medium.url;
          if (imageData.formats.small?.url) return imageData.formats.small.url;
          if (imageData.formats.thumbnail?.url) return imageData.formats.thumbnail.url;
        }

        if (typeof imageData === 'object' && imageData.url) {
          const url = imageData.url;
          return url.startsWith('http') ? url : `https://mintdealsbackend-production.up.railway.app${url}`;
        }

        if (typeof imageData === 'string') {
          return imageData.startsWith('http') ? imageData : `https://mintdealsbackend-production.up.railway.app${imageData}`;
        }

        return null;
      }

      const imageUrl = getImageUrl(data.image)
        || getImageUrl(data.Image)
        || getImageUrl(data.IMAGE)
        || getImageUrl(region.image)
        || getImageUrl(region.Image)
        || null;

      return {
        id: region.id,
        documentId: region.documentId,
        name: data.name || data.Name || '',
        slug: data.slug || data.Slug || region.documentId || region.id,
        description: data.description || data.Description || '',
        image: imageUrl
      };
    });

    regions = regions.filter(region => region.name);
  }

} catch (error) {
  apiError = error instanceof Error ? error.message : 'Unknown error';
}
---
---

<style>
  body {
    margin: 0;
    padding: 0;
  }
  .video-background {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: -1;
    overflow: hidden;
  }
  .video-background::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-image: linear-gradient(to top,  rgba(41, 163, 41, 0.35), rgba(51, 204, 51, 0.3), rgba(92, 214, 92, 0.25), rgba(133, 224, 133, 0.2), rgba(194, 240, 194, 0.15), rgba(235, 250, 235, 0.1), rgba(255, 255, 255, 0.08), rgba(255, 255, 255, 0.06), rgba(255, 255, 255, 0.04), rgba(255, 255, 255, 0.02));
    mix-blend-mode: color;
    pointer-events: none;
    z-index: 1;
  }
  .video-background video {
    object-fit: cover;
    height: 100%;
    width: 100%;
  }
  .content-wrapper {
    position: relative;
    z-index: 1;
    background: linear-gradient(to bottom, rgba(0,0,0,0.2), rgba(0,0,0,0.4));
  }
  .hero-section {
    min-height: 7.5vh; /* Half of original 15vh */
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 0.5rem 0;
  }

  .hero-section h1 {
    line-height: 1.2;
  }

  @media (min-width: 768px) {
    .hero-section {
      min-height: 30vh; /* Half of original 60vh */
      padding: 1rem 0;
    }
  }
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>

<Layout title="Mint Deals - Cannabis Dispensaries & Products" description="Find cannabis dispensaries, products, and deals. Your trusted source for premium cannabis products and information.">
  <!-- Video Background -->
  <div class="video-background">
    <video autoplay loop muted playsinline>
      <source src="https://video.wixstatic.com/video/d47472_58cce06729c54ccb935886c4b3647274/1080p/mp4/file.mp4" type="video/mp4">
    </video>
  </div>

  <!-- Content Wrapper -->
  <div class="content-wrapper">
    <!-- Hero Section -->
    <div class="text-white hero-section">
    <div class="px-8 mx-auto sm:px-12 lg:px-16 xl:px-20 max-w-[90%]">
      <div class="text-center">
        <h1 class="mb-4 text-4xl font-bold md:text-6xl drop-shadow-2xl" style="line-height: 1.2;">
          <span class="inline-block pb-2 leading-tight bg-gradient-to-r from-yellow-400 to-orange-500 bg-clip-text text-transparent" style="padding-bottom: 0.5rem;">
            Mint Cannabis Deals
          </span>
        </h1>
        <p class="max-w-2xl mx-auto mb-6 text-lg text-yellow-400 md:text-xl drop-shadow-lg">
          Your trusted source for premium cannabis products and information
        </p>
        <div class="flex flex-wrap justify-center gap-4">
          <a href="/stores" class="px-6 py-2.5 text-base font-semibold text-white transition-all transform rounded-lg shadow-lg bg-gradient-to-r from-yellow-400 to-transparent hover:from-yellow-500 hover:to-transparent hover:scale-105">
            Find Locations
          </a>
          <a href="/categories" class="px-6 py-2.5 text-base font-semibold text-white transition-all transform rounded-lg shadow-lg bg-gradient-to-r from-yellow-400 to-transparent hover:from-yellow-500 hover:to-transparent hover:scale-105">
            Browse Products
          </a>
        </div>
      </div>
    </div>
    </div>

    <!-- Quick Stats Section -->
  <div class="py-4 bg-black bg-opacity-90">
    <div class="px-8 mx-auto sm:px-12 lg:px-16 xl:px-20 max-w-[90%]">
      <div class="grid grid-cols-2 gap-12 text-center md:grid-cols-3">
        <div>
          <div class="mb-1 text-2xl font-bold text-green-500">{stores.length}+</div>
          <div class="text-sm text-yellow-400">Locations</div>
        </div>
        <div>
          <div class="mb-1 text-2xl font-bold text-green-500">{categories.length}+</div>
          <div class="text-sm text-yellow-400">Categories</div>
        </div>
        <div>
          <div class="mb-1 text-2xl font-bold text-green-500">24/7</div>
          <div class="text-sm text-yellow-400">Available</div>
        </div>
      </div>
    </div>
  </div>

  <!-- Product Categories Section -->
  <div class="py-16 bg-black">
    <div class="px-8 mx-auto sm:px-12 lg:px-16 xl:px-20 max-w-[90%]">
      <div class="mb-8 text-center">
        <h2 class="mb-3 text-2xl font-bold md:text-3xl">
          <span class="inline-block pb-2 leading-tight bg-gradient-to-r from-yellow-400 to-orange-500 bg-clip-text text-transparent" style="padding-bottom: 0.5rem;">
            Product Categories
          </span>
        </h2>
      </div>

      {apiError ? (
        <div class="py-12 text-center">
          <div class="max-w-md p-8 mx-auto bg-red-900 rounded-lg bg-opacity-80">
            <div class="mb-4 text-6xl text-red-400">⚠️</div>
            <h3 class="mb-2 text-lg font-medium text-red-200">API Error</h3>
            <p class="text-sm text-red-300">{apiError}</p>
          </div>
        </div>
      ) : categories.length > 0 ? (
        <div class="grid grid-cols-2 gap-6 md:grid-cols-3 lg:grid-cols-4 xl:gap-8">
          {categories.slice(0, 8).map((category, index) => (
            <a
              href={`/${category.slug}`}
              class="relative overflow-hidden transition-all transform bg-black border-2 border-green-500 group rounded-xl hover:border-yellow-400 hover:scale-105 hover:-translate-y-1"
            >
              {/* Category Image or Icon */}
              {category.image ? (
                <div class="h-40 overflow-hidden bg-gradient-to-br from-green-900/30 to-black/50">
                  <img
                    src={category.image}
                    alt={category.title}
                    class="object-cover w-full h-full transition-opacity opacity-80 group-hover:opacity-100"
                  />
                </div>
              ) : (
                <div class={`h-40 bg-gradient-to-br ${category.colorGradient} flex items-center justify-center`}>
                  <span class="text-5xl">{category.icon}</span>
                </div>
              )}

              {/* Category Content */}
              <div class="p-4">
                <h3 class="mb-1 text-lg font-bold">
                  <span class="inline-block pb-1 leading-tight bg-gradient-to-r from-yellow-400 to-orange-500 bg-clip-text text-transparent group-hover:from-yellow-300 group-hover:to-orange-400" style="padding-bottom: 0.25rem;">
                    {category.title}
                  </span>
                </h3>
                {category.description && (
                  <p class="mb-2 text-xs text-green-300 line-clamp-2">
                    {category.description}
                  </p>
                )}
                <div class="flex items-center justify-between">
                  <span class="text-xs text-green-400">
                    {category.productCount || 0} products
                  </span>
                  <span class="text-yellow-400 transition-transform group-hover:translate-x-1">
                    →
                  </span>
                </div>
              </div>
            </a>
          ))}
        </div>
      ) : (
        <div class="py-12 text-center">
          <div class="max-w-md p-8 mx-auto bg-black border-2 border-green-500 rounded-lg">
            <div class="mb-4 text-6xl">🌿</div>
            <h3 class="mb-2 text-lg font-medium text-yellow-400">Categories Coming Soon</h3>
            <p class="text-green-300">Product categories will be available here.</p>
          </div>
        </div>
      )}

      <div class="mt-12 text-center">
        <a href="/categories" class="inline-flex items-center px-6 py-3 font-medium text-white transition-all transform rounded-lg shadow-lg bg-gradient-to-r from-yellow-400 to-transparent hover:from-yellow-500 hover:to-transparent hover:scale-105">
          View All Categories
          <svg class="w-4 h-4 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7l5 5m0 0l-5 5m5-5H6"></path>
          </svg>
        </a>
      </div>
    </div>
  </div>

  <!-- Regions Section -->
  <div class="py-16 bg-gradient-to-b from-black to-green-900/40">
    <div class="px-8 mx-auto sm:px-12 lg:px-16 xl:px-20 max-w-[90%]">
      <div class="mb-8 text-center">
        <h2 class="mb-3 text-2xl font-bold md:text-3xl">
          <span class="inline-block pb-2 leading-tight bg-gradient-to-r from-yellow-400 to-orange-500 bg-clip-text text-transparent" style="padding-bottom: 0.5rem;">
            Shop by Region
          </span>
        </h2>
        <p class="text-lg text-green-300">
          Explore cannabis products available in your area
        </p>
      </div>

      {regions.length > 0 ? (
        <div class="grid grid-cols-2 gap-6 md:grid-cols-3 lg:grid-cols-4 xl:gap-8">
          {regions.slice(0, 8).map((region) => (
            <a
              href={`/region/${region.slug}`}
              class="relative overflow-hidden transition-all transform bg-black border-2 border-green-500 group rounded-xl hover:border-yellow-400 hover:scale-105 hover:-translate-y-1"
            >
              {/* Region Image */}
              {region.image ? (
                <div class="h-40 overflow-hidden bg-gradient-to-br from-green-900/30 to-black/50">
                  <img
                    src={region.image}
                    alt={region.name}
                    class="object-cover w-full h-full transition-opacity opacity-80 group-hover:opacity-100"
                  />
                </div>
              ) : (
                <div class="h-40 bg-gradient-to-br from-green-600 to-green-700 flex items-center justify-center">
                  <span class="text-5xl">📍</span>
                </div>
              )}

              {/* Region Content */}
              <div class="p-4">
                <h3 class="mb-1 text-lg font-bold">
                  <span class="inline-block pb-1 leading-tight bg-gradient-to-r from-yellow-400 to-orange-500 bg-clip-text text-transparent group-hover:from-yellow-300 group-hover:to-orange-400" style="padding-bottom: 0.25rem;">
                    {region.name}
                  </span>
                </h3>
                {region.description && (
                  <p class="mb-2 text-xs text-green-300 line-clamp-2">
                    {region.description}
                  </p>
                )}
                <div class="flex items-center justify-between">
                  <span class="text-xs text-green-400">
                    View stores
                  </span>
                  <span class="text-yellow-400 transition-transform group-hover:translate-x-1">
                    →
                  </span>
                </div>
              </div>
            </a>
          ))}
        </div>
      ) : (
        <div class="py-12 text-center">
          <div class="max-w-md p-8 mx-auto bg-black border-2 border-green-500 rounded-lg">
            <div class="mb-4 text-6xl">📍</div>
            <h3 class="mb-2 text-lg font-medium text-yellow-400">Regions Coming Soon</h3>
            <p class="text-green-300">Regional information will be available here.</p>
          </div>
        </div>
      )}

      <div class="mt-12 text-center">
        <a href="/regions" class="inline-flex items-center px-6 py-3 font-medium text-white transition-all transform rounded-lg shadow-lg bg-gradient-to-r from-yellow-400 to-transparent hover:from-yellow-500 hover:to-transparent hover:scale-105">
          View All Regions
          <svg class="w-4 h-4 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7l5 5m0 0l-5 5m5-5H6"></path>
          </svg>
        </a>
      </div>
    </div>
  </div>

  <!-- Featured Locations Section -->
  <div class="py-16 bg-gradient-to-b from-green-900/40 to-black/60">
    <div class="px-8 mx-auto sm:px-12 lg:px-16 xl:px-20 max-w-[90%]">
      <div class="mb-8 text-center">
        <h2 class="mb-3 text-2xl font-bold md:text-3xl">
          <span class="inline-block pb-2 leading-tight bg-gradient-to-r from-yellow-400 to-orange-500 bg-clip-text text-transparent" style="padding-bottom: 0.5rem;">
            Featured Locations
          </span>
        </h2>
      </div>

      {apiError ? (
        <div class="py-12 text-center">
          <div class="max-w-md p-8 mx-auto rounded-lg bg-red-50 dark:bg-red-900">
            <div class="mb-4 text-6xl text-red-600 dark:text-red-400">⚠️</div>
            <h3 class="mb-2 text-lg font-medium text-red-800 dark:text-red-200">API Error</h3>
            <p class="text-sm text-red-600 dark:text-red-300">{apiError}</p>
          </div>
        </div>
      ) : stores.length > 0 ? (
        <div>
          <!-- Location Status Bar -->
          <div id="location-status" class="hidden p-4 mb-6 text-center border border-green-500 rounded-lg bg-green-900/50">
            <div id="location-loading" class="flex items-center justify-center gap-3">
              <div class="w-5 h-5 border-b-2 border-yellow-400 rounded-full animate-spin"></div>
              <span class="text-yellow-400">Getting your location to show nearest stores...</span>
            </div>
            <div id="location-success" class="hidden text-green-300">
              📍 Showing stores near you
            </div>
            <div id="location-error" class="hidden text-yellow-400">
              📍 Location unavailable - showing all stores
            </div>
          </div>

          <div id="stores-grid" class="grid grid-cols-1 gap-6 md:grid-cols-2 lg:grid-cols-3 xl:gap-8">
            {stores.slice(0, 6).map(store => (
              <div
                class="overflow-hidden transition-all transform bg-black border-2 border-green-500 rounded-lg shadow-lg store-card hover:shadow-2xl hover:border-yellow-400 hover:scale-105"
                data-store-id={store.id}
                data-lat={store.address?.latitude || ''}
                data-lng={store.address?.longitude || ''}
                data-name={store.name}
              >
                {store.image && (
                  <img
                    src={store.image}
                    alt={store.name}
                    class="object-cover w-full h-48"
                  />
                )}
                <div class="p-6">
                  <div class="flex items-start justify-between mb-2">
                    <h3 class="text-xl font-bold">
                      <span class="inline-block pb-1 leading-tight bg-gradient-to-r from-yellow-400 to-orange-500 bg-clip-text text-transparent" style="padding-bottom: 0.25rem;">
                        {store.name}
                      </span>
                    </h3>
                    <span class="hidden px-2 py-1 text-xs text-green-400 rounded store-distance bg-green-900/50"></span>
                  </div>
                  {store.address && (
                    <p class="flex items-start mb-2 text-green-300">
                      <svg class="w-5 h-5 mr-2 mt-0.5 text-green-600 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"/>
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"/>
                      </svg>
                      {store.address.city}, {store.address.state}
                    </p>
                  )}
                  {store.phone && (
                    <p class="flex items-center mb-4 text-green-300">
                      <svg class="w-5 h-5 mr-2 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"/>
                      </svg>
                      {store.phone}
                    </p>
                  )}
                  <a href={`/location/${store.slug}`} class="inline-flex items-center font-medium text-yellow-400 hover:text-yellow-300">
                    View Details
                    <svg class="w-4 h-4 ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                    </svg>
                  </a>
                </div>
              </div>
            ))}
          </div>
        </div>
      ) : (
        <div class="py-12 text-center">
          <div class="max-w-md p-8 mx-auto bg-black border-2 border-green-500 rounded-lg">
            <h3 class="mb-2 text-lg font-medium text-yellow-400">No Locations Available</h3>
            <p class="text-green-300">Location information will be displayed here.</p>
          </div>
        </div>
      )}

      <div class="mt-12 text-center">
        <a href="/stores" class="inline-flex items-center px-6 py-3 font-medium text-white transition-all transform rounded-lg shadow-lg bg-gradient-to-r from-yellow-400 to-transparent hover:from-yellow-500 hover:to-transparent hover:scale-105">
          View All Locations
          <svg class="w-4 h-4 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7l5 5m0 0l-5 5m5-5H6"></path>
          </svg>
        </a>
      </div>
    </div>
  </div>

  <!-- About Section -->
  <div class="py-16 bg-gradient-to-b from-black/60 to-green-900/40">
    <div class="px-8 mx-auto sm:px-12 lg:px-16 xl:px-20 max-w-[90%]">
      <div class="mb-8 text-center">
        <h2 class="mb-3 text-2xl font-bold md:text-3xl">
          <span class="inline-block pb-2 leading-tight bg-gradient-to-r from-yellow-400 to-orange-500 bg-clip-text text-transparent" style="padding-bottom: 0.5rem;">
            Why Choose Mint Deals
          </span>
        </h2>
        <p class="text-lg text-green-300">
          Your trusted partner in cannabis discovery
        </p>
      </div>

      <div class="grid grid-cols-1 gap-8 md:grid-cols-3 xl:gap-12">
        <!-- Feature 1 -->
        <a href="/stores" class="p-6 transition-all bg-black border-2 border-green-500 rounded-lg shadow-lg hover:border-yellow-400 hover:scale-105 transform group">
          <div class="flex items-center justify-center w-12 h-12 mb-4 bg-green-900 rounded-lg group-hover:bg-green-800">
            <svg class="w-8 h-8 text-yellow-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"></path>
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"></path>
            </svg>
          </div>
          <h3 class="mb-3 text-xl font-bold text-yellow-400 group-hover:text-yellow-300">Find Locations</h3>
          <p class="text-green-300">
            Discover trusted dispensaries near you with detailed information and directions.
          </p>
          <div class="mt-4 flex items-center text-yellow-400 group-hover:text-yellow-300">
            <span class="text-sm font-medium">View All Stores</span>
            <svg class="w-4 h-4 ml-2 transition-transform group-hover:translate-x-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
            </svg>
          </div>
        </a>

        <!-- Feature 2 -->
        <a href="/categories" class="p-6 transition-all bg-black border-2 border-green-500 rounded-lg shadow-lg hover:border-yellow-400 hover:scale-105 transform group">
          <div class="flex items-center justify-center w-12 h-12 mb-4 bg-green-900 rounded-lg group-hover:bg-green-800">
            <svg class="w-8 h-8 text-yellow-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
            </svg>
          </div>
          <h3 class="mb-3 text-xl font-bold text-yellow-400 group-hover:text-yellow-300">Browse Products</h3>
          <p class="text-green-300">
            Explore comprehensive product information and educational resources.
          </p>
          <div class="mt-4 flex items-center text-yellow-400 group-hover:text-yellow-300">
            <span class="text-sm font-medium">View All Categories</span>
            <svg class="w-4 h-4 ml-2 transition-transform group-hover:translate-x-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
            </svg>
          </div>
        </a>

        <!-- Feature 3 -->
        <a href="/deals" class="p-6 transition-all bg-black border-2 border-green-500 rounded-lg shadow-lg hover:border-yellow-400 hover:scale-105 transform group">
          <div class="flex items-center justify-center w-12 h-12 mb-4 bg-green-900 rounded-lg group-hover:bg-green-800">
            <svg class="w-8 h-8 text-yellow-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
          </div>
          <h3 class="mb-3 text-xl font-bold text-yellow-400 group-hover:text-yellow-300">Find Deals</h3>
          <p class="text-green-300">
            Discover the latest deals and promotions from dispensaries near you.
          </p>
          <div class="mt-4 flex items-center text-yellow-400 group-hover:text-yellow-300">
            <span class="text-sm font-medium">View All Deals</span>
            <svg class="w-4 h-4 ml-2 transition-transform group-hover:translate-x-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
            </svg>
          </div>
        </a>
      </div>
    </div>
  </div>
  </div>

  <!-- Location-based sorting script -->
  <script>
    // Haversine formula to calculate distance between two coordinates
    function calculateDistance(lat1, lon1, lat2, lon2) {
      const R = 3958.756; // Earth's radius in miles
      const dLat = (lat2 - lat1) * Math.PI / 180;
      const dLon = (lon2 - lon1) * Math.PI / 180;

      const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
                Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
                Math.sin(dLon / 2) * Math.sin(dLon / 2);

      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
      const distance = R * c;

      return distance;
    }

    // Format distance display
    function formatDistance(distance) {
      if (distance < 1) {
        return `${(distance * 5280).toFixed(0)} ft`;
      } else {
        return `${distance.toFixed(1)} mi`;
      }
    }

    // Sort stores by distance and update display
    function sortStoresByDistance(userLat, userLon) {
      const storeCards = Array.from(document.querySelectorAll('.store-card'));
      const storesGrid = document.getElementById('stores-grid');

      // Calculate distances and store in array
      const storesWithDistance = storeCards.map(card => {
        const lat = parseFloat(card.dataset.lat);
        const lng = parseFloat(card.dataset.lng);

        let distance = Infinity;
        if (lat && lng && !isNaN(lat) && !isNaN(lng)) {
          distance = calculateDistance(userLat, userLon, lat, lng);
        }

        return {
          element: card,
          distance: distance,
          name: card.dataset.name
        };
      });

      // Sort by distance (closest first)
      storesWithDistance.sort((a, b) => a.distance - b.distance);

      // Update DOM order and add distance labels
      storesWithDistance.forEach((store, index) => {
        // Update distance display
        const distanceElement = store.element.querySelector('.store-distance');
        if (store.distance !== Infinity) {
          distanceElement.textContent = formatDistance(store.distance);
          distanceElement.classList.remove('hidden');
        }

        // Re-append to change order
        storesGrid.appendChild(store.element);
      });

      console.log('🏪 Stores sorted by distance:', storesWithDistance.map(s => ({ name: s.name, distance: s.distance.toFixed(1) + ' mi' })));
    }

    // Main geolocation function
    function setupLocationSorting() {
      const locationStatus = document.getElementById('location-status');
      const locationLoading = document.getElementById('location-loading');
      const locationSuccess = document.getElementById('location-success');
      const locationError = document.getElementById('location-error');

      // Show status bar
      locationStatus.classList.remove('hidden');

      // Check if geolocation is supported
      if (!navigator.geolocation) {
        console.log('📍 Geolocation not supported');
        locationLoading.classList.add('hidden');
        locationError.classList.remove('hidden');
        return;
      }

      // Get user's location
      navigator.geolocation.getCurrentPosition(
        (position) => {
          const userLat = position.coords.latitude;
          const userLon = position.coords.longitude;

          console.log('📍 User location obtained:', { lat: userLat, lon: userLon });

          // Update UI
          locationLoading.classList.add('hidden');
          locationSuccess.classList.remove('hidden');

          // Sort stores by distance
          sortStoresByDistance(userLat, userLon);

          // Hide status after 3 seconds
          setTimeout(() => {
            locationStatus.style.transition = 'opacity 0.5s ease-out';
            locationStatus.style.opacity = '0';
            setTimeout(() => {
              locationStatus.classList.add('hidden');
              locationStatus.style.opacity = '1';
            }, 500);
          }, 3000);
        },
        (error) => {
          console.log('📍 Geolocation error:', error.message);

          // Update UI for error
          locationLoading.classList.add('hidden');
          locationError.classList.remove('hidden');

          // Hide status after 3 seconds
          setTimeout(() => {
            locationStatus.style.transition = 'opacity 0.5s ease-out';
            locationStatus.style.opacity = '0';
            setTimeout(() => {
              locationStatus.classList.add('hidden');
              locationStatus.style.opacity = '1';
            }, 500);
          }, 3000);
        },
        {
          enableHighAccuracy: true,
          timeout: 10000,
          maximumAge: 300000 // 5 minutes
        }
      );
    }

    // Initialize when DOM is loaded
    document.addEventListener('DOMContentLoaded', () => {
      // Only run if we have stores on the page
      if (document.querySelectorAll('.store-card').length > 0) {
        setupLocationSorting();
      }
    });
  </script>
</Layout>