---
import Layout from '../../layouts/Layout.astro';
import DutchieEmbed from '../../components/DutchieEmbed.astro';
import DutchieCarousel from '../../components/DutchieCarousel.astro';

const API_BASE = 'https://mintdealsbackend-production.up.railway.app/api';
const { locationSlug } = Astro.params;

// Fetch store data dynamically based on slug
let store = null;
try {
  const response = await fetch(`${API_BASE}/stores?filters[slug][$eq]=${locationSlug}&populate=*`);
  const data = await response.json();

  if (data?.data && data.data.length > 0) {
    store = data.data[0];
  } else {
    // Store not found, return 404
    return Astro.redirect('/404');
  }
} catch (error) {
  // API error, return 404
  return Astro.redirect('/404');
}

// Helper function to safely extract string values
const getStringValue = (value, fallback = '') => {
  return typeof value === 'string' ? value : fallback;
};

const storeName = store?.name || 'Store Location';
const storeCity = getStringValue(store?.address?.city) || getStringValue(store?.city) || '';
const storeState = getStringValue(store?.address?.state) || getStringValue(store?.state) || '';
const storeAddress = getStringValue(store?.address?.street) || getStringValue(store?.street) || '';
const storeZip = getStringValue(store?.address?.zipCode) || getStringValue(store?.zip_code) || '';
const storePhone = getStringValue(store?.phone) || '';
const storeEmail = getStringValue(store?.email) || '';

// Build Google Maps URL - prefer coordinates from geo field, fallback to address
let mapsUrl = '';
if (store?.geo?.lat && store?.geo?.lng) {
  mapsUrl = `https://www.google.com/maps/dir/?api=1&destination=${store.geo.lat},${store.geo.lng}`;
} else if (storeAddress || storeCity || storeState) {
  // Use address as fallback
  const addressParts = [storeAddress, storeCity, storeState, storeZip].filter(part => part).join(', ');
  const encodedAddress = encodeURIComponent(addressParts);
  mapsUrl = `https://www.google.com/maps/dir/?api=1&destination=${encodedAddress}`;
}
const storeShortDescription = getStringValue(store?.short_description) || 'Premium cannabis products and expert guidance for your wellness journey.';
const storeLongDescription = getStringValue(store?.description) || getStringValue(store?.long_description) || 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.';

// Helper function to get image URL
function getImageUrl(imageData: any) {
  if (!imageData || imageData === null) return null;

  // Case 1: Strapi v4 nested structure
  if (imageData?.data?.attributes?.url) {
    const url = imageData.data.attributes.url;
    return url.startsWith('http') ? url : `https://mintdealsbackend-production.up.railway.app${url}`;
  }

  // Case 2: Direct image object with formats (Cloudinary)
  if (typeof imageData === 'object' && imageData.formats) {
    if (imageData.formats.large?.url) return imageData.formats.large.url;
    if (imageData.formats.medium?.url) return imageData.formats.medium.url;
    if (imageData.formats.small?.url) return imageData.formats.small.url;
    if (imageData.formats.thumbnail?.url) return imageData.formats.thumbnail.url;
  }

  // Case 3: Direct image object with url
  if (typeof imageData === 'object' && imageData.url) {
    const url = imageData.url;
    return url.startsWith('http') ? url : `https://mintdealsbackend-production.up.railway.app${url}`;
  }

  // Case 4: String URL
  if (typeof imageData === 'string') {
    return imageData.startsWith('http') ? imageData : `https://mintdealsbackend-production.up.railway.app${imageData}`;
  }

  return null;
}

// Get store image - prioritize hero_media, fallback to StoreImage, then image
const storeImage = getImageUrl(store?.hero_media) || getImageUrl(store?.StoreImage) || getImageUrl(store?.image);

// Get Dutchie Store ID - extract from menu_url field
let dutchieStoreId = '';
const menuUrl = getStringValue(store?.menu_url) || getStringValue(store?.online_ordering_url) || '';

if (menuUrl) {
  // Extract the ID from the script URL in menu_url
  const match = menuUrl.match(/embedded-menu\/([^.]+)\.js/);
  if (match) {
    dutchieStoreId = match[1];
  }
}

// Get carousel IDs from carousel_url if available
let carouselRetailerId = '';
let carouselId = '';
const carouselUrl = getStringValue(store?.carousel_url) || '';

if (carouselUrl) {
  // Extract retailer ID and carousel ID from v3 carousel script
  // Format: embedded-menu/{retailerId}/carousels/{carouselId}.js
  const carouselMatch = carouselUrl.match(/embedded-menu\/([^\/]+)\/carousels\/([^.]+)\.js/);
  if (carouselMatch) {
    carouselRetailerId = carouselMatch[1];
    carouselId = carouselMatch[2];
  }
}

// Build the route root URL
const baseUrl = 'https://mintdeals2025.pages.dev';
const routeRoot = `${baseUrl}/location/${locationSlug}/menu`;

// Fetch products for this store
let products: any[] = [];
try {
  const response = await fetch(`${API_BASE}/products?filters[stores][id][$eq]=${store?.id}&populate=*&pagination[pageSize]=50`);
  if (response.ok) {
    const data = await response.json();
    products = data?.data || [];
  }
} catch (error) {
  // Silent error
}
---

<style>
  .video-background {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: -1;
    overflow: hidden;
  }
  .video-background::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-image: linear-gradient(to top,  rgba(41, 163, 41, 0.35), rgba(51, 204, 51, 0.3), rgba(92, 214, 92, 0.25), rgba(133, 224, 133, 0.2), rgba(194, 240, 194, 0.15), rgba(235, 250, 235, 0.1), rgba(255, 255, 255, 0.08), rgba(255, 255, 255, 0.06), rgba(255, 255, 255, 0.04), rgba(255, 255, 255, 0.02));
    mix-blend-mode: color;
    pointer-events: none;
    z-index: 1;
  }
  .video-background video {
    object-fit: cover;
    height: 100%;
    width: 100%;
  }
  .content-wrapper {
    position: relative;
    z-index: 1;
  }
</style>

<Layout title={`${storeName} - ${storeCity}, ${storeState}`} description={`Visit ${storeName} in ${storeCity}, ${storeState} for premium cannabis products`}>

  <!-- Video Background -->
  <div class="video-background">
    <video autoplay loop muted playsinline>
      <source src="https://video.wixstatic.com/video/d47472_58cce06729c54ccb935886c4b3647274/1080p/mp4/file.mp4" type="video/mp4">
    </video>
  </div>

  <!-- Content Wrapper -->
  <div class="content-wrapper">

  <!-- Hero Section -->
  <section class="relative text-white py-16">
    <div class="absolute inset-0 bg-black opacity-40"></div>
    <div class="relative z-10 max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <!-- Breadcrumb -->
      <nav class="mb-8 text-sm">
        <div class="flex items-center space-x-2">
          <a href="/" class="text-yellow-400 hover:text-yellow-300">Home</a>
          <span class="text-green-300">/</span>
          <a href="/stores" class="text-yellow-400 hover:text-yellow-300">Stores</a>
          <span class="text-green-300">/</span>
          <span class="text-white">{storeName}</span>
        </div>
      </nav>

      <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
        <!-- Store Image -->
        <div class="lg:col-span-1">
          {storeImage ? (
            <img
              src={storeImage}
              alt={storeName}
              class="w-full h-64 lg:h-80 object-cover rounded-lg shadow-xl border-4 border-yellow-400"
            />
          ) : (
            <div class="w-full h-64 lg:h-80 bg-gradient-to-br from-green-900 to-green-800 rounded-lg shadow-xl border-4 border-yellow-400 flex items-center justify-center">
              <span class="text-8xl">üè™</span>
            </div>
          )}
        </div>

        <!-- Store Info -->
        <div class="lg:col-span-2">
          <h1 class="text-4xl md:text-5xl font-bold mb-4">
            <span class="inline-block pb-2 leading-tight bg-gradient-to-r from-yellow-400 to-orange-500 bg-clip-text text-transparent" style="padding-bottom: 0.5rem;">
              {storeName}
            </span>
          </h1>

          {(storeCity || storeState) && (
            <p class="text-2xl text-yellow-400 mb-6 flex items-center">
              <svg class="w-6 h-6 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"/>
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"/>
              </svg>
              {storeCity}{storeCity && storeState ? ', ' : ''}{storeState}
            </p>
          )}

          <p class="text-lg text-green-100 mb-6 leading-relaxed">
            {storeShortDescription}
          </p>

          <!-- Quick Actions -->
          <div class="flex flex-wrap gap-4">
            {dutchieStoreId && (
              <a
                href={`/location/${locationSlug}/menu`}
                class="inline-flex items-center px-6 py-3 text-base font-semibold text-white transition-all transform rounded-lg shadow-lg bg-gradient-to-r from-yellow-400 to-transparent hover:from-yellow-500 hover:to-transparent hover:scale-105"
              >
                <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01"/>
                </svg>
                View Full Menu
              </a>
            )}
            {mapsUrl && (
              <a
                href={mapsUrl}
                target="_blank"
                rel="noopener noreferrer"
                class="inline-flex items-center px-6 py-3 text-base font-semibold text-white transition-all transform rounded-lg shadow-lg bg-gradient-to-r from-yellow-400 to-transparent hover:from-yellow-500 hover:to-transparent hover:scale-105"
              >
                <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 20l-5.447-2.724A1 1 0 013 16.382V5.618a1 1 0 011.447-.894L9 7m0 13l6-3m-6 3V7m6 10l4.553 2.276A1 1 0 0021 18.382V7.618a1 1 0 00-.553-.894L15 4m0 13V4m0 0L9 7"/>
                </svg>
                Get Driving Directions
              </a>
            )}
            {storePhone && (
              <a
                href={`tel:${storePhone}`}
                class="inline-flex items-center px-6 py-3 text-base font-semibold text-white transition-all transform rounded-lg shadow-lg bg-gradient-to-r from-yellow-400 to-transparent hover:from-yellow-500 hover:to-transparent hover:scale-105"
              >
                <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"/>
                </svg>
                Call Store
              </a>
            )}
          </div>
        </div>
      </div>
    </div>
  </section>

  <!-- Main Content -->
  <div class="bg-black py-16">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">

        <!-- Main Column -->
        <div class="lg:col-span-2 space-y-8">

          <!-- About This Location Section -->
          <div class="bg-gradient-to-br from-green-900/40 to-black/60 rounded-lg shadow-xl p-8 border-2 border-green-500">
            <h2 class="text-3xl font-bold mb-6 flex items-center">
              <svg class="w-8 h-8 mr-3 text-yellow-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
              </svg>
              <span class="inline-block pb-2 leading-tight bg-gradient-to-r from-yellow-400 to-orange-500 bg-clip-text text-transparent" style="padding-bottom: 0.35rem;">About This Location</span>
            </h2>
            <p class="text-green-100 text-lg leading-relaxed">
              {storeLongDescription}
            </p>
          </div>

          <!-- Products Section -->
          <div class="bg-gradient-to-br from-green-900/40 to-black/60 rounded-lg shadow-xl p-8 border-2 border-green-500">
            <h2 class="text-3xl font-bold mb-6 flex items-center">
              <svg class="w-8 h-8 mr-3 text-yellow-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4"/>
              </svg>
              <span class="inline-block pb-2 leading-tight bg-gradient-to-r from-yellow-400 to-orange-500 bg-clip-text text-transparent" style="padding-bottom: 0.35rem;">Available Products</span>
            </h2>

            <!-- Dutchie Carousel Embed -->
            {(carouselRetailerId && carouselId) ? (
              <div class="w-full bg-white rounded-lg p-6 min-h-[300px]">
                <DutchieCarousel retailerId={carouselRetailerId} carouselId={carouselId} routeRoot={routeRoot} />
              </div>
            ) : dutchieStoreId ? (
              <div class="w-full bg-white rounded-lg p-6 min-h-[300px]">
                <DutchieEmbed storeId={dutchieStoreId} />
              </div>
            ) : (
              <div class="w-full bg-white rounded-lg p-6 min-h-[300px] flex items-center justify-center">
                <p class="text-gray-500 text-lg">Product menu not available for this location.</p>
              </div>
            )}
          </div>

        </div>

        <!-- Sidebar -->
        <div class="lg:col-span-1 space-y-6">

          <!-- Contact Info Card -->
          <div class="bg-gradient-to-br from-green-900/40 to-black/60 rounded-lg shadow-xl p-6 border-2 border-green-500">
            <h3 class="text-xl font-bold mb-4 flex items-center">
              <svg class="w-6 h-6 mr-2 text-yellow-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"/>
              </svg>
              <span class="inline-block pb-2 leading-tight bg-gradient-to-r from-yellow-400 to-orange-500 bg-clip-text text-transparent" style="padding-bottom: 0.25rem;">Contact</span>
            </h3>
            <div class="space-y-3">
              {storeAddress && (
                <div class="flex items-start">
                  <svg class="w-5 h-5 text-green-400 mr-3 mt-0.5 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"/>
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"/>
                  </svg>
                  <div>
                    <p class="text-green-200">{storeAddress}</p>
                    <p class="text-green-200">{storeCity}, {storeState} {storeZip}</p>
                    {mapsUrl && (
                      <a
                        href={mapsUrl}
                        target="_blank"
                        rel="noopener noreferrer"
                        class="text-yellow-400 hover:text-yellow-300 text-sm mt-1 inline-block"
                      >
                        Get Driving Directions ‚Üí
                      </a>
                    )}
                  </div>
                </div>
              )}

              {storePhone && (
                <div class="flex items-center">
                  <svg class="w-5 h-5 text-green-400 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"/>
                  </svg>
                  <a href={`tel:${storePhone}`} class="text-green-300 hover:text-yellow-400">
                    {storePhone}
                  </a>
                </div>
              )}

              {storeEmail && (
                <div class="flex items-center">
                  <svg class="w-5 h-5 text-green-400 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"/>
                  </svg>
                  <a href={`mailto:${storeEmail}`} class="text-green-300 hover:text-yellow-400">
                    {storeEmail}
                  </a>
                </div>
              )}
            </div>
          </div>

          <!-- Hours Card -->
          {store?.hours && store.hours.length > 0 && (
            <div class="bg-gradient-to-br from-green-900/40 to-black/60 rounded-lg shadow-xl p-6 border-2 border-green-500">
              <div class="mb-4">
                <h3 class="text-xl font-bold flex items-center">
                  <svg class="w-6 h-6 mr-2 text-yellow-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"/>
                  </svg>
                  <span class="inline-block pb-2 leading-tight bg-gradient-to-r from-yellow-400 to-orange-500 bg-clip-text text-transparent" style="padding-bottom: 0.25rem;">Store Hours</span>
                </h3>
                <div id="countdown-timer" class="text-sm text-green-300 mt-2 ml-8"></div>
              </div>
              <div class="space-y-2" id="store-hours-list">
                {store.hours.map((hour: any) => {
                  const dayName = hour.dayOfWeek ? hour.dayOfWeek.charAt(0).toUpperCase() + hour.dayOfWeek.slice(1).toLowerCase() : 'Daily';

                  // Format time to 12-hour format with single letter (09:00:00 -> 9:00A, 21:00:00 -> 9:00P)
                  const formatTime = (time: string) => {
                    if (!time) return '';

                    // Check if already in 12-hour format with AM/PM
                    if (/AM|PM/i.test(time)) {
                      return time.replace(/\s*AM/i, 'A').replace(/\s*PM/i, 'P');
                    }

                    // Parse 24-hour format (09:00:00 or 09:00)
                    const match = time.match(/^(\d{1,2}):(\d{2})/);
                    if (!match) return time;

                    let hours = parseInt(match[1]);
                    const minutes = match[2];
                    const period = hours >= 12 ? 'P' : 'A';

                    // Convert to 12-hour format
                    if (hours === 0) hours = 12;
                    else if (hours > 12) hours -= 12;

                    return `${hours}:${minutes}${period}`;
                  };

                  const openTime = formatTime(hour.openTime || '');
                  const closeTime = formatTime(hour.closeTime || '');

                  return (
                    <div
                      class="hour-row flex justify-between text-sm p-2 rounded transition-colors"
                      data-day={hour.dayOfWeek?.toLowerCase()}
                    >
                      <span class="day-name font-medium text-green-300">
                        {dayName}
                        <span class="today-label ml-2 text-xs hidden"></span>
                      </span>
                      <span class="time-display text-green-200">
                        {hour.is_24hour ? '24 Hours' : hour.isClosed ? 'Closed' : `${openTime} - ${closeTime}`}
                      </span>
                    </div>
                  );
                })}
              </div>
            </div>
          )}

        </div>
      </div>

      <!-- Back Button -->
      <div class="mt-12 text-center">
        <a
          href="/stores"
          class="inline-flex items-center px-6 py-3 font-medium text-white transition-all transform rounded-lg shadow-lg bg-gradient-to-r from-yellow-400 to-transparent hover:from-yellow-500 hover:to-transparent hover:scale-105"
        >
          <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"/>
          </svg>
          Back to All Stores
        </a>
      </div>
    </div>
  </div>

  <script is:inline define:vars={{ storeHours: store?.hours || [] }}>
    // Highlight today's hours
    function highlightTodaysHours() {
      const dayNames = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];
      const now = new Date();
      const today = dayNames[now.getDay()];

      // Find all hour rows
      const hourRows = document.querySelectorAll('.hour-row');

      hourRows.forEach(row => {
        const dayAttr = row.getAttribute('data-day');
        if (dayAttr && dayAttr.toLowerCase() === today) {
          // Highlight today's row
          row.classList.add('bg-yellow-400/20', 'border-l-4', 'border-yellow-400');

          // Update day name styling
          const dayNameEl = row.querySelector('.day-name');
          if (dayNameEl) {
            dayNameEl.classList.remove('text-green-300');
            dayNameEl.classList.add('text-yellow-400', 'font-bold');

            // Show "Today" label
            const todayLabel = dayNameEl.querySelector('.today-label');
            if (todayLabel) {
              todayLabel.textContent = '(Today)';
              todayLabel.classList.remove('hidden');
            }
          }

          // Update time display styling
          const timeDisplayEl = row.querySelector('.time-display');
          if (timeDisplayEl) {
            timeDisplayEl.classList.remove('text-green-200');
            timeDisplayEl.classList.add('text-yellow-300');
          }
        }
      });
    }

    function updateCountdown() {
      const countdownEl = document.getElementById('countdown-timer');
      if (!countdownEl || !storeHours || storeHours.length === 0) return;

      const now = new Date();
      const dayNames = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
      const currentDay = dayNames[now.getDay()];

      // Find today's hours
      const todayHours = storeHours.find(h => h.dayOfWeek?.toLowerCase() === currentDay.toLowerCase());

      if (!todayHours) {
        countdownEl.textContent = 'Hours not available';
        return;
      }

      if (todayHours.isClosed) {
        countdownEl.innerHTML = '<span class="text-red-400">‚≠ï Closed Today</span>';
        return;
      }

      if (todayHours.is_24hour) {
        countdownEl.innerHTML = '<span class="text-green-400">‚úÖ Open 24 Hours</span>';
        return;
      }

      // Parse closing time
      const closeTime = todayHours.closeTime;
      if (!closeTime) {
        countdownEl.textContent = '';
        return;
      }

      // Parse time (assuming format like "9:00 PM" or "21:00")
      const timeParts = closeTime.match(/(\d+):(\d+)\s*(AM|PM)?/i);
      if (!timeParts) {
        countdownEl.textContent = '';
        return;
      }

      let hours = parseInt(timeParts[1]);
      const minutes = parseInt(timeParts[2]);
      const period = timeParts[3]?.toUpperCase();

      // Convert to 24-hour format
      if (period === 'PM' && hours !== 12) hours += 12;
      if (period === 'AM' && hours === 12) hours = 0;

      const closeDate = new Date();
      closeDate.setHours(hours, minutes, 0, 0);

      // If close time is before current time, assume it's tomorrow
      if (closeDate < now) {
        closeDate.setDate(closeDate.getDate() + 1);
      }

      const diff = closeDate - now;

      if (diff < 0) {
        countdownEl.innerHTML = '<span class="text-red-400">‚≠ï Closed</span>';
        return;
      }

      const hoursLeft = Math.floor(diff / (1000 * 60 * 60));
      const minutesLeft = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));
      const secondsLeft = Math.floor((diff % (1000 * 60)) / 1000);

      if (diff < 3600000) { // Less than 1 hour
        countdownEl.innerHTML = `<span class="text-yellow-400 font-semibold">‚ö†Ô∏è Closing soon: ${minutesLeft}m ${secondsLeft}s</span>`;
      } else if (diff < 7200000) { // Less than 2 hours
        countdownEl.innerHTML = `<span class="text-yellow-400">‚è∞ Closes in: ${hoursLeft}h ${minutesLeft}m</span>`;
      } else {
        countdownEl.innerHTML = `<span class="text-green-400">‚úÖ Open - Closes in: ${hoursLeft}h ${minutesLeft}m</span>`;
      }
    }

    // Initialize when page loads
    document.addEventListener('DOMContentLoaded', function() {
      highlightTodaysHours();
      updateCountdown();
      setInterval(updateCountdown, 1000);
    });

    // Also run immediately in case DOMContentLoaded already fired
    if (document.readyState === 'loading') {
      // DOMContentLoaded has not fired yet
    } else {
      // DOMContentLoaded has already fired
      highlightTodaysHours();
      updateCountdown();
      setInterval(updateCountdown, 1000);
    }
  </script>

  </div> <!-- Close content-wrapper -->

</Layout>
