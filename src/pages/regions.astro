---
export const prerender = true;

import Layout from '../layouts/Layout.astro';

// Fetch stores and regions from Railway backend
let storesData = [];
let regionsData = [];
let categoriesData = [];
let apiError = null;

const API_BASE = 'https://mintdealsbackend-production.up.railway.app/api';

// Helper function to get image URL (same as used on region page)
function getImageUrl(imageData: any) {
  if (!imageData || imageData === null) return null;

  // Case 1: Strapi v4 nested structure: image.data.attributes.url
  if (imageData?.data?.attributes?.url) {
    const url = imageData.data.attributes.url;
    return url.startsWith('http') ? url : `https://mintdealsbackend-production.up.railway.app${url}`;
  }

  // Case 2: Direct image object with formats (Cloudinary or Strapi uploaded images)
  if (typeof imageData === 'object' && imageData.formats) {
    // Prefer larger formats for better quality
    if (imageData.formats.large?.url) return imageData.formats.large.url;
    if (imageData.formats.medium?.url) return imageData.formats.medium.url;
    if (imageData.formats.small?.url) return imageData.formats.small.url;
    if (imageData.formats.thumbnail?.url) return imageData.formats.thumbnail.url;
  }

  // Case 3: Direct image object with url: image.url
  if (typeof imageData === 'object' && imageData.url) {
    const url = imageData.url;
    return url.startsWith('http') ? url : `https://mintdealsbackend-production.up.railway.app${url}`;
  }

  // Case 4: String URL directly
  if (typeof imageData === 'string') {
    return imageData.startsWith('http') ? imageData : `https://mintdealsbackend-production.up.railway.app${imageData}`;
  }

  return null;
}

try {
  console.log('üöÄ Fetching regions with stores from Railway API');

  // Fetch regions with stores populated (only populate=* works on this API)
  const regionsResponse = await fetch(`${API_BASE}/regions?populate=*&pagination[pageSize]=100`);

  if (regionsResponse.ok) {
    const data = await regionsResponse.json();
    const rawRegions = data?.data || [];
    console.log('‚úÖ Regions loaded:', rawRegions.length);

    // Fetch all stores with addresses in one query
    console.log('üì¶ Fetching stores for address data...');
    const storesResponse = await fetch(`${API_BASE}/stores?populate=*&pagination[pageSize]=200`);
    const storesData = await storesResponse.json();
    const storesMap = {};

    (storesData?.data || []).forEach(store => {
      storesMap[store.documentId || store.id] = store;
    });

    // Debug: Log first store to see structure
    if (storesData?.data && storesData.data.length > 0) {
      console.log('üîç Sample store data:', JSON.stringify(storesData.data[0], null, 2));
    }

    // Fetch each region individually to get images (list queries don't populate Image field)
    console.log('üñºÔ∏è Fetching region images...');
    const regionsWithImages = await Promise.all(
      rawRegions.map(async (region) => {
        try {
          const regionDetailResponse = await fetch(`${API_BASE}/regions/${region.documentId || region.id}?populate=*`);
          if (regionDetailResponse.ok) {
            const regionDetail = await regionDetailResponse.json();
            return regionDetail.data;
          }
        } catch (e) {
          console.error('Error fetching region image:', region.name, e);
        }
        return region;
      })
    );

    // Build regions with stores grouped by city using the stores relationship
    regionsData = regionsWithImages.map(region => {
      // Get stores directly from the region's stores field
      const regionStores = (region.stores || []).map(store => {
        const fullStore = storesMap[store.documentId || store.id];
        // Merge basic store data with full address data
        return fullStore || store;
      });

      console.log(`üìç Region ${region.name}: ${regionStores.length} stores`);

      // Group stores by city
      const citiesMap = {};

      // Helper function to safely extract string values
      const getStringValue = (value, fallback = '') => {
        return typeof value === 'string' ? value : fallback;
      };

      regionStores.forEach(store => {
        // Handle various address structures with type checking
        let city = getStringValue(store.address?.city) || getStringValue(store.city) || 'Unknown City';

        if (!citiesMap[city]) {
          citiesMap[city] = {
            name: city,
            locations: [],
            categories: new Set()
          };
        }
        citiesMap[city].locations.push(store);
      });

      // Get region image URL
      const imageUrl = getImageUrl(region.image) || getImageUrl(region.Image) || getImageUrl(region.IMAGE);

      return {
        id: region.id || region.documentId,
        name: region.name,
        code: region.code,
        slug: region.name ? region.name.toLowerCase().replace(/\s+/g, '-') : (region.id || region.documentId),
        imageUrl: imageUrl,
        cities: Object.values(citiesMap).map(city => ({
          ...city,
          categories: Array.from(city.categories)
        })),
        locations: regionStores,
        totalLocations: regionStores.length
      };
    }).filter(region => region.totalLocations > 0);

    console.log('‚úÖ Regions with stores:', regionsData.length);
  } else {
    console.error('‚ùå Regions API error:', regionsResponse.status, regionsResponse.statusText);
    apiError = `Failed to fetch regions: ${regionsResponse.status}`;
  }

} catch (error) {
  console.error('‚ùå Error fetching data:', error);
  apiError = error.message;
}
---

<style>
  body {
    margin: 0;
    padding: 0;
  }
  .video-background {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: -1;
    overflow: hidden;
  }
  .video-background::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-image: linear-gradient(to top,  rgba(41, 163, 41, 0.35), rgba(51, 204, 51, 0.3), rgba(92, 214, 92, 0.25), rgba(133, 224, 133, 0.2), rgba(194, 240, 194, 0.15), rgba(235, 250, 235, 0.1), rgba(255, 255, 255, 0.08), rgba(255, 255, 255, 0.06), rgba(255, 255, 255, 0.04), rgba(255, 255, 255, 0.02));
    mix-blend-mode: color;
    pointer-events: none;
    z-index: 1;
  }
  .video-background video {
    object-fit: cover;
    height: 100%;
    width: 100%;
  }
  .content-wrapper {
    position: relative;
    z-index: 1;
    background: linear-gradient(to bottom, rgba(0,0,0,0.2), rgba(0,0,0,0.4));
  }
  .hero-section {
    min-height: 7.5vh;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 0.5rem 0;
  }

  .hero-section h1 {
    line-height: 1.2;
  }

  @media (min-width: 768px) {
    .hero-section {
      min-height: 30vh;
      padding: 1rem 0;
    }
  }

  /* Gradient heading class with better browser support */
  .gradient-heading {
    background: linear-gradient(to right, #fbbf24, #f97316);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    text-fill-color: transparent;
    display: inline-block;
  }
</style>

<Layout title="Regions - Mint Cannabis" description="Browse cannabis dispensaries by region and area">
  <!-- Video Background -->
  <div class="video-background">
    <video autoplay loop muted playsinline>
      <source src="https://video.wixstatic.com/video/d47472_58cce06729c54ccb935886c4b3647274/1080p/mp4/file.mp4" type="video/mp4">
    </video>
  </div>

  <!-- Content Wrapper -->
  <div class="content-wrapper">
    <!-- Hero Section -->
    <div class="text-white hero-section">
      <div class="px-8 mx-auto sm:px-12 lg:px-16 xl:px-20 max-w-[90%]">
        <!-- Breadcrumb -->
        <nav class="mb-6 text-sm">
          <div class="flex items-center justify-center space-x-2">
            <a href="/" class="text-yellow-400 hover:text-yellow-300">Home</a>
            <span class="text-green-300">/</span>
            <span class="text-white">Regions</span>
          </div>
        </nav>

        <div class="text-center">
          <h1 class="mb-4 text-4xl font-bold md:text-6xl drop-shadow-2xl">
            <span class="inline-block pb-2 leading-tight bg-gradient-to-r from-yellow-400 to-orange-500 bg-clip-text text-transparent" style="padding-bottom: 0.5rem;">
              Explore Our Regions
            </span>
          </h1>
          <p class="max-w-2xl mx-auto mb-6 text-lg text-yellow-400 md:text-xl drop-shadow-lg">
            Discover premium cannabis dispensaries across multiple states
          </p>

          <!-- Navigation Buttons -->
          <div class="relative z-10 flex flex-wrap justify-center gap-4 mt-6">
            <a href="/stores" class="px-8 py-3 text-lg font-bold text-white transition-all transform rounded-lg shadow-xl bg-gradient-to-r from-yellow-400 to-transparent hover:from-yellow-500 hover:to-transparent hover:scale-105">
              All Stores
            </a>
            <a href="/categories" class="px-8 py-3 text-lg font-bold text-white transition-all transform rounded-lg shadow-xl bg-gradient-to-r from-yellow-400 to-transparent hover:from-yellow-500 hover:to-transparent hover:scale-105">
              Browse Categories
            </a>
          </div>
        </div>
      </div>
    </div>

    <!-- Quick Stats Bar -->
    <div class="py-4 bg-black bg-opacity-90">
      <div class="px-8 mx-auto sm:px-12 lg:px-16 xl:px-20 max-w-[90%]">
        <div class="grid grid-cols-2 gap-8 text-center md:grid-cols-3">
          <div>
            <div class="mb-1 text-2xl font-bold text-green-500">{regionsData.length}</div>
            <div class="text-sm text-yellow-400 font-semibold">Regions</div>
          </div>
          <div>
            <div class="mb-1 text-2xl font-bold text-green-500">{regionsData.reduce((sum, r) => sum + r.totalLocations, 0)}</div>
            <div class="text-sm text-yellow-400 font-semibold">Locations</div>
          </div>
          <div>
            <div class="mb-1 text-2xl font-bold text-green-500">{regionsData.reduce((sum, r) => sum + r.cities.length, 0)}</div>
            <div class="text-sm text-yellow-400 font-semibold">Cities</div>
          </div>
        </div>
      </div>
    </div>

    <!-- Main Content -->
    <div class="py-12 bg-black">
      <div class="px-8 mx-auto sm:px-12 lg:px-16 xl:px-20 max-w-[90%]">
        {regionsData.length === 0 ? (
          <div class="py-16 text-center">
            <div class="max-w-md p-8 mx-auto bg-black border-2 border-green-500 rounded-lg">
              <div class="mb-4 text-6xl">üó∫Ô∏è</div>
              <h3 class="mb-2 pb-1 text-lg font-medium gradient-heading leading-snug">No Regions Available</h3>
              <p class="text-green-300">
                {apiError ? `Error: ${apiError}` : 'No regions are available at this time.'}
              </p>
            </div>
          </div>
        ) : (
          <div class="space-y-12">
            <!-- Region Cards -->
            {regionsData.map(region => (
              <div class="p-6 bg-black border-2 border-green-500 rounded-lg md:p-8">
                {/* Region Header */}
                <div class="flex flex-col items-start justify-between mb-6 md:flex-row md:items-center">
                  <div class="flex items-center gap-4">
                    {/* Region Image Icon */}
                    {region.imageUrl ? (
                      <img
                        src={region.imageUrl}
                        alt={region.name}
                        class="w-16 h-16 object-cover rounded-lg border-2 border-yellow-400 flex-shrink-0"
                      />
                    ) : (
                      <div class="w-16 h-16 bg-gradient-to-br from-green-900 to-green-800 rounded-lg border-2 border-yellow-400 flex items-center justify-center flex-shrink-0">
                        <span class="text-2xl">üìç</span>
                      </div>
                    )}

                    <div>
                      <h2 class="mb-2 text-3xl font-bold">
                        <span class="inline-block pb-2 leading-tight bg-gradient-to-r from-yellow-400 to-orange-500 bg-clip-text text-transparent" style="padding-bottom: 0.35rem;">
                          {region.name}
                        </span>
                      </h2>
                      <div class="flex gap-4 text-sm text-green-300">
                        <span>{region.totalLocations} dispensar{region.totalLocations !== 1 ? 'ies' : 'y'}</span>
                        <span>‚Ä¢</span>
                        <span>{region.cities.length} cit{region.cities.length !== 1 ? 'ies' : 'y'}</span>
                      </div>
                    </div>
                  </div>
                  <a
                    href={`/region/${region.slug}`}
                    class="inline-flex items-center px-6 py-3 mt-4 font-medium text-white transition-all transform rounded-lg shadow-lg md:mt-0 bg-gradient-to-r from-yellow-400 to-transparent hover:from-yellow-500 hover:to-transparent hover:scale-105"
                  >
                    View All Locations
                    <svg class="w-4 h-4 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                    </svg>
                  </a>
                </div>

                {/* Stores Grid */}
                <div class="grid grid-cols-1 gap-4 md:grid-cols-2 lg:grid-cols-4 xl:gap-5">
                  {region.locations.map(store => {
                    // Get store image URL
                    const storeImageUrl = getImageUrl(store.StoreImage);

                    // Get store details with fallbacks
                    const storeName = store.Name || store.name || 'Store Location';
                    const storeAddress = store.Address || store.address || null;
                    const storeCity = store.City || store.city || store.address?.city || '';
                    const storeState = store.State || store.state || store.address?.state || '';
                    const storeZip = store.Zip || store.zip || store.address?.zip || '';
                    const storePhone = store.Phone || store.phone || store.address?.phone || null;

                    return (
                      <div class="store-card relative overflow-hidden transition-all transform bg-black border-2 border-green-500 rounded-lg shadow-lg hover:shadow-2xl hover:border-yellow-400 hover:scale-105">
                        {/* Store Name Header */}
                        <div class="bg-gradient-to-r from-green-900 to-black p-3 border-b-2 border-green-500">
                          <h3 class="text-lg font-bold text-center">
                            <span class="inline-block pb-1 leading-tight bg-gradient-to-r from-yellow-400 to-orange-500 bg-clip-text text-transparent" style="padding-bottom: 0.25rem;">
                              {storeName}
                            </span>
                          </h3>
                        </div>

                        {/* Store Image */}
                        <div class="relative">
                          {storeImageUrl ? (
                            <img
                              src={storeImageUrl}
                              alt={storeName}
                              class="object-cover w-full h-32"
                            />
                          ) : (
                            <div class="w-full h-32 bg-gradient-to-br from-green-600 to-green-800 flex items-center justify-center relative">
                              <span class="text-4xl" title={store.Is24Hour ? '24 Hour' : ''}>
                                {store.Is24Hour ? 'üè™' : 'üè£'}
                              </span>
                              {/* Mint coin logo overlay on building emoji */}
                              {!store.Is24Hour && (
                                <img
                                  src="/favicon.png"
                                  alt="Mint"
                                  class="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-6 h-6 object-contain opacity-90"
                                  style="margin-top: -6px;"
                                />
                              )}
                            </div>
                          )}

                          {/* Cafe Badge */}
                          {store.HasCafe && (
                            <div class="absolute bottom-1 right-1">
                              <div class="bg-orange-900/90 border border-orange-500 text-orange-300 px-1.5 py-0.5 rounded text-lg shadow-lg" title="Cafe on Site">
                                üçî
                              </div>
                            </div>
                          )}
                        </div>

                        {/* Store Details */}
                        <div class="p-4">
                          {/* Address */}
                          {(storeAddress || storeCity) && (
                            <div class="mb-2">
                              {storeAddress && (
                                <p class="flex items-start text-green-300 text-sm">
                                  <svg class="w-4 h-4 mr-1.5 mt-0.5 text-green-600 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"></path>
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"></path>
                                  </svg>
                                  <span>{storeAddress}</span>
                                </p>
                              )}
                              {storeCity && (
                                <p class="flex items-start text-green-300 text-sm ml-5.5">
                                  <span>{storeCity}{storeState ? `, ${storeState}` : ''} {storeZip}</span>
                                </p>
                              )}
                              {(store.Latitude && store.Longitude) && (
                                <a
                                  href={`https://www.google.com/maps/dir/?api=1&destination=${store.Latitude},${store.Longitude}`}
                                  target="_blank"
                                  rel="noopener noreferrer"
                                  class="text-yellow-400 hover:text-yellow-300 text-xs ml-5.5 inline-block mt-0.5"
                                >
                                  Get Directions ‚Üí
                                </a>
                              )}
                            </div>
                          )}

                          {/* Phone */}
                          {storePhone && (
                            <p class="flex items-center mb-3 text-green-300 text-sm">
                              <svg class="w-4 h-4 mr-1.5 text-green-600 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"></path>
                              </svg>
                              {storePhone}
                            </p>
                          )}

                          {/* View Details Link */}
                          <a
                            href={`/location/${store.slug || store.documentId}`}
                            class="inline-flex items-center font-medium text-yellow-400 transition-colors hover:text-yellow-300 text-sm"
                          >
                            View Details
                            <svg class="w-3.5 h-3.5 ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                            </svg>
                          </a>
                        </div>
                      </div>
                    );
                  })}
                </div>
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  </div>
</Layout>
